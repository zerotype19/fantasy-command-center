{
  "version": 3,
  "sources": ["../bundle-41kHW4/checked-fetch.js", "../bundle-41kHW4/strip-cf-connecting-ip-header.js", "../../../src/utils/db.ts", "../../../src/utils/fetchHelpers.ts", "../../../src/services/noaa.ts", "../../../src/services/espn.ts", "../../../src/handlers/league.ts", "../../../src/services/sleeper.ts", "../../../src/services/fantasyPros.ts", "../../../src/services/nflSchedule.ts", "../../../src/constants/stadiumLocations.ts", "../../../src/utils/matchups.ts", "../../../src/handlers/players.ts", "../../../src/handlers/alerts.ts", "../../../src/handlers/team.ts", "../../../src/index.ts", "../../../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-41kHW4/middleware-insertion-facade.js", "../../../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-41kHW4/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/kevinmcgovern/fantasy-command-center/fantasy-command-center/apps/api/.wrangler/tmp/dev-PVwgct",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "export class DatabaseService {\n  private db: any;\n\n  constructor(db: any) {\n    this.db = db;\n  }\n\n  // Player management\n  async getAllPlayers(): Promise<any[]> {\n    const result = await this.db.prepare(\n      'SELECT * FROM players ORDER BY name'\n    ).all();\n    return result.results || [];\n  }\n\n  async getPlayerByEspnId(espnId: string): Promise<any> {\n    const result = await this.db.prepare(\n      'SELECT * FROM players WHERE espn_id = ?'\n    ).bind(espnId).first();\n    return result;\n  }\n\n  async getPlayerBySleeperId(sleeperId: string): Promise<any> {\n    const result = await this.db.prepare(\n      'SELECT * FROM players WHERE sleeper_id = ?'\n    ).bind(sleeperId).first();\n    return result;\n  }\n\n  async getPlayersBySleeperIds(sleeperIds: string[]): Promise<any[]> {\n    if (sleeperIds.length === 0) return [];\n    \n    const placeholders = sleeperIds.map(() => '?').join(',');\n    const result = await this.db.prepare(\n      `SELECT * FROM players WHERE sleeper_id IN (${placeholders})`\n    ).bind(...sleeperIds).all();\n    return result.results || [];\n  }\n\n  async upsertSleeperPlayers(players: any[]): Promise<void> {\n    if (players.length === 0) return;\n\n    // Insert all available fields from Sleeper API\n    const stmt = this.db.prepare(`\n      INSERT OR REPLACE INTO players (\n        sleeper_id, espn_id, name, position, team, status, bye_week,\n        age, years_exp, college, weight, height, jersey_number, fantasy_positions,\n        fantasy_data_id, search_rank, injury_status, injury_start_date, injury_notes,\n        practice_participation, depth_chart_position, depth_chart_order, yahoo_id,\n        rotowire_id, rotoworld_id, sportradar_id, first_name, last_name, birth_date,\n        birth_city, birth_state, birth_country, high_school, hashtag, team_abbr,\n        team_changed_at, gsis_id, swish_id, stats_id, oddsjam_id, opta_id,\n        pandascore_id, sport, news_updated, practice_description, injury_body_part,\n        search_first_name, search_last_name, search_full_name, metadata, competitions\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    const batch = players.map(player => \n      stmt.bind(\n        player.sleeper_id,\n        player.espn_id || null,\n        player.name,\n        player.position,\n        player.team,\n        player.status,\n        player.bye_week,\n        player.age || null,\n        player.years_exp || null,\n        player.college || null,\n        player.weight || null,\n        player.height || null,\n        player.jersey_number || null,\n        player.fantasy_positions ? JSON.stringify(player.fantasy_positions) : null,\n        player.fantasy_data_id || null,\n        player.search_rank || null,\n        player.injury_status || null,\n        player.injury_start_date || null,\n        player.injury_notes || null,\n        player.practice_participation || null,\n        player.depth_chart_position || null,\n        player.depth_chart_order || null,\n        player.yahoo_id || null,\n        player.rotowire_id || null,\n        player.rotoworld_id || null,\n        player.sportradar_id || null,\n        player.first_name || null,\n        player.last_name || null,\n        player.birth_date || null,\n        player.birth_city || null,\n        player.birth_state || null,\n        player.birth_country || null,\n        player.high_school || null,\n        player.hashtag || null,\n        player.team_abbr || null,\n        player.team_changed_at || null,\n        player.gsis_id || null,\n        player.swish_id || null,\n        player.stats_id || null,\n        player.oddsjam_id || null,\n        player.opta_id || null,\n        player.pandascore_id || null,\n        player.sport || null,\n        player.news_updated || null,\n        player.practice_description || null,\n        player.injury_body_part || null,\n        player.search_first_name || null,\n        player.search_last_name || null,\n        player.search_full_name || null,\n        player.metadata ? JSON.stringify(player.metadata) : null,\n        player.competitions ? JSON.stringify(player.competitions) : null\n      )\n    );\n\n    await this.db.batch(batch);\n  }\n\n  // Projection management\n  async getProjectionByPlayerId(playerId: number): Promise<any> {\n    const result = await this.db.prepare(\n      'SELECT * FROM projections WHERE player_id = ? ORDER BY week DESC LIMIT 1'\n    ).bind(playerId).first();\n    return result;\n  }\n\n  // Trending players management\n  async getTrendingPlayers(type: string, limit: number = 10): Promise<any[]> {\n    const result = await this.db.prepare(`\n      SELECT tp.*, p.name, p.position, p.team, p.status\n      FROM trending_players tp\n      LEFT JOIN players p ON tp.sleeper_id = p.sleeper_id\n      WHERE tp.type = ?\n      ORDER BY tp.count DESC, tp.created_at DESC\n      LIMIT ?\n    `).bind(type, limit).all();\n    return result.results || [];\n  }\n\n  async getTrendingPlayersByLookback(type: string, lookbackHours: number, limit: number = 10): Promise<any[]> {\n    const result = await this.db.prepare(`\n      SELECT tp.*, p.name, p.position, p.team, p.status\n      FROM trending_players tp\n      LEFT JOIN players p ON tp.sleeper_id = p.sleeper_id\n      WHERE tp.type = ? AND tp.lookback_hours = ? AND tp.created_at >= datetime('now', '-${lookbackHours} hours')\n      ORDER BY tp.count DESC, tp.created_at DESC\n      LIMIT ?\n    `).bind(type, lookbackHours, limit).all();\n    return result.results || [];\n  }\n}\n\n// Standalone trending players functions for the scheduled job\nexport async function upsertTrendingPlayers(\n  db: any, \n  trendingPlayers: any[], \n  type: string, \n  lookbackHours: number\n): Promise<void> {\n  if (trendingPlayers.length === 0) return;\n\n  const stmt = db.prepare(`\n    INSERT INTO trending_players (player_id, sleeper_id, type, count, lookback_hours)\n    VALUES (?, ?, ?, ?, ?)\n    ON CONFLICT(player_id, type, lookback_hours) DO UPDATE SET\n      count = excluded.count,\n      updated_at = CURRENT_TIMESTAMP\n  `);\n\n  const batch = trendingPlayers.map(player => \n    stmt.bind(\n      player.player_id,\n      player.player_id, // sleeper_id is the same as player_id for trending players\n      type,\n      player.count,\n      lookbackHours\n    )\n  );\n\n  await db.batch(batch);\n}\n\nexport async function getTrendingPlayers(db: any, type: string, limit: number = 10): Promise<any[]> {\n  const result = await db.prepare(`\n    SELECT tp.*, p.name, p.position, p.team, p.status\n    FROM trending_players tp\n    LEFT JOIN players p ON tp.sleeper_id = p.sleeper_id\n    WHERE tp.type = ?\n    ORDER BY tp.count DESC, tp.created_at DESC\n    LIMIT ?\n  `).bind(type, limit).all();\n  return result.results || [];\n}\n\nexport async function getTrendingPlayersByLookback(db: any, type: string, lookbackHours: number, limit: number = 10): Promise<any[]> {\n  const result = await db.prepare(`\n    SELECT tp.*, p.name, p.position, p.team, p.status\n    FROM trending_players tp\n    LEFT JOIN players p ON tp.sleeper_id = p.sleeper_id\n    WHERE tp.type = ? AND tp.lookback_hours = ? AND tp.created_at >= datetime('now', '-${lookbackHours} hours')\n    ORDER BY tp.count DESC, tp.created_at DESC\n    LIMIT ?\n  `).bind(type, lookbackHours, limit).all();\n  return result.results || [];\n}\n\n// FantasyPros data management\nexport async function upsertFantasyProsData(db: any, fantasyProsData: any[]): Promise<void> {\n  if (fantasyProsData.length === 0) return;\n\n  const stmt = db.prepare(`\n    INSERT OR REPLACE INTO fantasy_pros_data (\n      sleeper_id, source, week, season, ecr_rank, projected_points, \n      auction_value, sos_rank, tier, position_rank, value_over_replacement\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n  `);\n\n  const batch = fantasyProsData.map(item =>\n    stmt.bind(\n      item.sleeper_id,\n      item.source || 'FantasyPros',\n      item.week || null,\n      item.season || null,\n      item.ecr_rank || null,\n      item.projected_points || null,\n      item.auction_value || null,\n      item.sos_rank || null,\n      item.tier || null,\n      item.position_rank || null,\n      item.value_over_replacement || null\n    )\n  );\n\n  await db.batch(batch);\n}\n\nexport async function updatePlayerFantasyProsData(db: any, playerUpdates: any[]): Promise<void> {\n  if (playerUpdates.length === 0) return;\n\n  const stmt = db.prepare(`\n    UPDATE players SET \n      search_rank = ?,\n      tier = ?,\n      position_rank = ?,\n      value_over_replacement = ?,\n      auction_value = ?,\n      projected_points = ?,\n      sos_rank = ?,\n      fantasy_pros_updated_at = CURRENT_TIMESTAMP\n    WHERE sleeper_id = ?\n  `);\n\n  const batch = playerUpdates.map(update => \n    stmt.bind(\n      update.search_rank || null,\n      update.tier || null,\n      update.position_rank || null,\n      update.value_over_replacement || null,\n      update.auction_value || null,\n      update.projected_points || null,\n      update.sos_rank || null,\n      update.sleeper_id\n    )\n  );\n\n  await db.batch(batch);\n  console.log(`Updated ${playerUpdates.length} players with FantasyPros data`);\n}\n\nexport async function getPlayersWithFantasyData(db: any, week?: number, season?: number): Promise<any[]> {\n  let query = `\n    SELECT p.*, \n           MAX(fp.ecr_rank) as ecr_rank, \n           MAX(fp.projected_points) as projected_points, \n           MAX(fp.auction_value) as auction_value, \n           MAX(fp.sos_rank) as sos_rank, \n           MAX(fp.tier) as tier, \n           MAX(fp.position_rank) as position_rank, \n           MAX(fp.value_over_replacement) as value_over_replacement, \n           MAX(fp.source) as source\n    FROM players p\n    LEFT JOIN fantasy_pros_data fp ON p.sleeper_id = fp.sleeper_id\n  `;\n  \n  const params = [];\n  if (week || season) {\n    query += ' WHERE ';\n    const conditions = [];\n    if (week) {\n      conditions.push('fp.week = ?');\n      params.push(week);\n    }\n    if (season) {\n      conditions.push('fp.season = ?');\n      params.push(season);\n    }\n    query += conditions.join(' AND ');\n  }\n  \n  query += ' GROUP BY p.sleeper_id ORDER BY p.name';\n  \n  const result = await db.prepare(query).bind(...params).all();\n  return result.results || [];\n}\n\n// NFL Schedule management\nexport async function upsertNFLSchedule(db: any, games: any[]): Promise<void> {\n  if (games.length === 0) return;\n\n  const stmt = db.prepare(`\n    INSERT OR REPLACE INTO nfl_schedule (\n      game_id, week, game_date, kickoff_time, home_team, away_team, \n      location, network, game_type, updated_at\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\n  `);\n\n  const batch = games.map(game => \n    stmt.bind(\n      game.game_id,\n      game.week,\n      game.game_date,\n      game.kickoff_time || null,\n      game.home_team,\n      game.away_team,\n      game.location || null,\n      game.network || null,\n      game.game_type,\n    )\n  );\n\n  await db.batch(batch);\n  console.log(`Upserted ${games.length} NFL schedule games`);\n}\n\nexport async function getNFLSchedule(db: any, week?: number): Promise<any[]> {\n  let query = 'SELECT * FROM nfl_schedule';\n  const params = [];\n  \n  if (week) {\n    query += ' WHERE week = ?';\n    params.push(week);\n  }\n  \n  query += ' ORDER BY game_date, kickoff_time';\n  \n  const result = await db.prepare(query).bind(...params).all();\n  return result.results || [];\n}\n\nexport async function getNFLGamesByWeek(db: any, week: number): Promise<any[]> {\n  const result = await db.prepare(`\n    SELECT * FROM nfl_schedule \n    WHERE week = ? \n    ORDER BY game_date, kickoff_time\n  `).bind(week).all();\n  return result.results || [];\n}\n\nexport async function getNFLGamesByTeam(db: any, team: string): Promise<any[]> {\n  const result = await db.prepare(`\n    SELECT * FROM nfl_schedule \n    WHERE home_team = ? OR away_team = ? \n    ORDER BY game_date, kickoff_time\n  `).bind(team, team).all();\n  return result.results || [];\n}\n", "export interface FetchOptions extends RequestInit {\n  retries?: number;\n  retryDelay?: number;\n  timeout?: number;\n}\n\nexport class FetchError extends Error {\n  constructor(\n    message: string,\n    public status: number,\n    public url: string,\n    public response?: Response\n  ) {\n    super(message);\n    this.name = 'FetchError';\n  }\n}\n\nexport async function fetchWithRetry(\n  url: string,\n  options: FetchOptions = {}\n): Promise<Response> {\n  const {\n    retries = 3,\n    retryDelay = 1000,\n    timeout = 10000,\n    ...fetchOptions\n  } = options;\n\n  let lastError: Error;\n\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      const response = await fetch(url, {\n        ...fetchOptions,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new FetchError(\n          `HTTP ${response.status}: ${response.statusText}`,\n          response.status,\n          url,\n          response\n        );\n      }\n\n      return response;\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === retries) {\n        break;\n      }\n\n      // Don't retry on 4xx errors (client errors)\n      if (error instanceof FetchError && error.status >= 400 && error.status < 500) {\n        throw error;\n      }\n\n      // Wait before retrying\n      await new Promise(resolve => setTimeout(resolve, retryDelay * Math.pow(2, attempt)));\n    }\n  }\n\n  throw lastError!;\n}\n\nexport async function fetchJson<T = any>(\n  url: string,\n  options: FetchOptions = {}\n): Promise<T> {\n  const response = await fetchWithRetry(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n  });\n\n  return response.json() as Promise<T>;\n}\n\nexport function createRateLimiter(maxRequests: number, timeWindow: number) {\n  const requests: number[] = [];\n\n  return function checkRateLimit(): boolean {\n    const now = Date.now();\n    const windowStart = now - timeWindow;\n\n    // Remove old requests outside the window\n    while (requests.length > 0 && requests[0] < windowStart) {\n      requests.shift();\n    }\n\n    if (requests.length >= maxRequests) {\n      return false; // Rate limit exceeded\n    }\n\n    requests.push(now);\n    return true; // Request allowed\n  };\n}\n\n// ESPN API rate limiter: 1 request per minute per league\nexport const espnRateLimiter = createRateLimiter(1, 60000);\n\n// FantasyPros rate limiter: 10 requests per minute\nexport const fantasyProsRateLimiter = createRateLimiter(10, 60000);\n\n// NOAA rate limiter: 5 requests per minute\nexport const noaaRateLimiter = createRateLimiter(5, 60000); ", "import { fetchJson, noaaRateLimiter } from '../utils/fetchHelpers';\n\nexport interface NOAAWeatherData {\n  latitude: number;\n  longitude: number;\n  date: string;\n  temperature?: number;\n  conditions?: string;\n  windSpeed?: number;\n  windDirection?: string;\n  humidity?: number;\n  precipitation?: number;\n}\n\nexport interface NOAAResponse {\n  properties?: {\n    periods?: Array<{\n      temperature: number;\n      shortForecast: string;\n      windSpeed: string;\n      windDirection: string;\n      relativeHumidity: {\n        value: number;\n      };\n      probabilityOfPrecipitation: {\n        value: number;\n      };\n    }>;\n  };\n  error?: string;\n}\n\nexport class NOAAService {\n  private baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  async getGameWeather(\n    lat: number,\n    lon: number,\n    date: string\n  ): Promise<NOAAWeatherData> {\n    if (!noaaRateLimiter()) {\n      throw new Error('NOAA API rate limit exceeded. Please try again later.');\n    }\n\n    try {\n      // First, get the grid data for the coordinates\n      const gridResponse = await fetchJson<any>(`${this.baseUrl}/points/${lat},${lon}`);\n      \n      if (!gridResponse.properties?.gridId || !gridResponse.properties?.gridX || !gridResponse.properties?.gridY) {\n        throw new Error('Invalid grid data received from NOAA');\n      }\n\n      const { gridId, gridX, gridY } = gridResponse.properties;\n      \n      // Then get the forecast for that grid\n      const forecastUrl = `${this.baseUrl}/grids/${gridId}/${gridX},${gridY}/forecast`;\n      const forecastResponse = await fetchJson<NOAAResponse>(forecastUrl);\n\n      if (forecastResponse.error) {\n        throw new Error(`NOAA API error: ${forecastResponse.error}`);\n      }\n\n      // Parse the forecast data for the specific date\n      const weatherData = this.parseForecastForDate(forecastResponse, date);\n\n      return {\n        latitude: lat,\n        longitude: lon,\n        date,\n        ...weatherData\n      };\n\n    } catch (error) {\n      console.error('NOAA API error:', error);\n      throw new Error(`Failed to fetch weather data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private parseForecastForDate(response: NOAAResponse, targetDate: string): Partial<NOAAWeatherData> {\n    if (!response.properties?.periods || !Array.isArray(response.properties.periods)) {\n      return {};\n    }\n\n    // Find the forecast period that matches our target date\n    const targetPeriod = response.properties.periods.find(period => {\n      // This is a simplified date matching - we'll need to refine based on actual NOAA response format\n      return period.shortForecast && period.shortForecast.toLowerCase().includes(targetDate.toLowerCase());\n    });\n\n    if (!targetPeriod) {\n      return {};\n    }\n\n    return {\n      temperature: targetPeriod.temperature,\n      conditions: targetPeriod.shortForecast,\n      windSpeed: this.parseWindSpeed(targetPeriod.windSpeed),\n      windDirection: targetPeriod.windDirection,\n      humidity: targetPeriod.relativeHumidity?.value,\n      precipitation: targetPeriod.probabilityOfPrecipitation?.value\n    };\n  }\n\n  private parseWindSpeed(windSpeedStr: string): number | undefined {\n    // Parse wind speed string like \"10 mph\" to number\n    const match = windSpeedStr.match(/(\\d+)/);\n    return match ? parseInt(match[1], 10) : undefined;\n  }\n\n  async getWeatherForStadium(stadiumName: string, date: string): Promise<NOAAWeatherData | null> {\n    // Stadium coordinates mapping - we can expand this as needed\n    const stadiumCoords: { [key: string]: { lat: number; lon: number } } = {\n      'Lambeau Field': { lat: 44.5013, lon: -88.0622 },\n      'Soldier Field': { lat: 41.8623, lon: -87.6166 },\n      'Ford Field': { lat: 42.3400, lon: -83.0456 },\n      'MetLife Stadium': { lat: 40.8135, lon: -74.0741 },\n      // Add more stadiums as needed\n    };\n\n    const coords = stadiumCoords[stadiumName];\n    if (!coords) {\n      console.warn(`No coordinates found for stadium: ${stadiumName}`);\n      return null;\n    }\n\n    return this.getGameWeather(coords.lat, coords.lon, date);\n  }\n\n  async getWeatherForTeam(teamAbbreviation: string, date: string): Promise<NOAAWeatherData | null> {\n    // Team to stadium mapping - we can expand this as needed\n    const teamStadiums: { [key: string]: string } = {\n      'GB': 'Lambeau Field',\n      'CHI': 'Soldier Field',\n      'DET': 'Ford Field',\n      'NYG': 'MetLife Stadium',\n      'NYJ': 'MetLife Stadium',\n      // Add more teams as needed\n    };\n\n    const stadiumName = teamStadiums[teamAbbreviation];\n    if (!stadiumName) {\n      console.warn(`No stadium found for team: ${teamAbbreviation}`);\n      return null;\n    }\n\n    return this.getWeatherForStadium(stadiumName, date);\n  }\n} ", "import { fetchWithRetry } from '../utils/fetchHelpers';\n\n// ESPN position ID mapping\nexport const POSITIONS = {\n  1: \"QB\", \n  2: \"RB\", \n  3: \"WR\", \n  4: \"TE\", \n  5: \"K\", \n  16: \"DEF\"\n};\n\n// ESPN API base URL\nconst ESPN_BASE_URL = \"https://lm-api-reads.fantasy.espn.com/apis/v3/games/ffl\";\n\n// Pull full league data (settings, teams, rosters)\nexport async function fetchLeagueData(leagueId: string): Promise<any> {\n  const url = `${ESPN_BASE_URL}/seasons/2024/segments/0/leagues/${leagueId}?view=mSettings&view=mRoster&view=mTeam`;\n  \n  console.log(`Fetching ESPN league data for league ${leagueId}`);\n  \n  const response = await fetchWithRetry(url, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n    }\n  }, 1); // Retry once if failed\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(`Failed to fetch ESPN league data for league ${leagueId}:`, {\n      status: response.status,\n      statusText: response.statusText,\n      errorText: errorText.substring(0, 500)\n    });\n    \n    if (response.status === 401) {\n      throw new Error(`League ${leagueId} is private or requires authentication. Please ensure you have access to this league.`);\n    } else if (response.status === 404) {\n      throw new Error(`League ${leagueId} not found. Please check the league ID.`);\n    } else {\n      throw new Error(`Failed to fetch ESPN league data: ${response.status} ${response.statusText}`);\n    }\n  }\n\n  const data = await response.json();\n  console.log(`Successfully fetched ESPN league data for league ${leagueId}`);\n  return data;\n}\n\n// Pull only one team's roster by teamId\nexport async function fetchTeamRoster(leagueId: string, teamId: number): Promise<any> {\n  const url = `${ESPN_BASE_URL}/seasons/2024/segments/0/leagues/${leagueId}?view=mRoster&rosterForTeamId=${teamId}`;\n  \n  console.log(`Fetching ESPN team roster for league ${leagueId}, team ${teamId}`);\n  \n  const response = await fetchWithRetry(url, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n    }\n  }, 1); // Retry once if failed\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(`Failed to fetch ESPN team roster for league ${leagueId}, team ${teamId}:`, {\n      status: response.status,\n      statusText: response.statusText,\n      errorText: errorText.substring(0, 500)\n    });\n    \n    if (response.status === 401) {\n      throw new Error(`League ${leagueId} is private or requires authentication. Please ensure you have access to this league.`);\n    } else if (response.status === 404) {\n      throw new Error(`League ${leagueId} or team ${teamId} not found. Please check the IDs.`);\n    } else {\n      throw new Error(`Failed to fetch ESPN team roster: ${response.status} ${response.statusText}`);\n    }\n  }\n\n  const data = await response.json();\n  console.log(`Successfully fetched ESPN team roster for league ${leagueId}, team ${teamId}`);\n  return data;\n}\n\n// Extract players from ESPN roster data\nexport function extractPlayersFromRoster(rosterData: any): any[] {\n  const players: any[] = [];\n  \n  if (!rosterData || !rosterData.teams || !Array.isArray(rosterData.teams)) {\n    console.error('Missing expected ESPN roster structure:', rosterData);\n    throw new Error('Missing expected ESPN roster structure');\n  }\n\n  for (const team of rosterData.teams) {\n    if (!team.roster || !Array.isArray(team.roster.entries)) {\n      console.warn(`Team ${team.id} has no roster entries`);\n      continue;\n    }\n\n    for (const entry of team.roster.entries) {\n      if (!entry.playerPoolEntry || !entry.playerPoolEntry.player) {\n        console.warn('Invalid roster entry:', entry);\n        continue;\n      }\n\n      const player = entry.playerPoolEntry.player;\n      const positionId = player.defaultPositionId;\n      \n      players.push({\n        espn_id: player.id.toString(),\n        name: player.fullName || player.firstName + ' ' + player.lastName,\n        position: POSITIONS[positionId as keyof typeof POSITIONS] || 'UNK',\n        team: player.proTeamId ? getTeamAbbreviation(player.proTeamId) : 'FA',\n        status: player.injuryStatus || 'healthy',\n        bye_week: null, // TODO: Populate via schedule scraping or NFL calendar API\n        roster_status: entry.status || 'active'\n      });\n    }\n  }\n\n  console.log(`Extracted ${players.length} players from ESPN roster data`);\n  return players;\n}\n\n// Extract league settings from ESPN data\nexport function extractLeagueSettings(leagueData: any): any {\n  if (!leagueData || !leagueData.settings) {\n    console.error('Missing expected ESPN league settings structure:', leagueData);\n    throw new Error('Missing expected ESPN league settings structure');\n  }\n\n  const settings = leagueData.settings;\n  \n  return {\n    scoring_json: JSON.stringify(settings.scoringSettings || {}),\n    roster_json: JSON.stringify(settings.rosterSettings || {}),\n    keeper_rules_json: JSON.stringify(settings.keeperSettings || {}),\n    auction_budget: settings.auctionBudget || 0,\n    waiver_budget: settings.waiverBudget || 0\n  };\n}\n\n// Get team abbreviation from ESPN team ID\nfunction getTeamAbbreviation(teamId: number): string {\n  const TEAM_MAP: { [key: number]: string } = {\n    1: 'ATL', 2: 'BUF', 3: 'CHI', 4: 'CIN', 5: 'CLE', 6: 'DAL', 7: 'DEN', 8: 'DET',\n    9: 'GB', 10: 'TEN', 11: 'IND', 12: 'KC', 13: 'LV', 14: 'LAR', 15: 'MIA', 16: 'MIN',\n    17: 'NE', 18: 'NO', 19: 'NYG', 20: 'NYJ', 21: 'PHI', 22: 'ARI', 23: 'PIT', 24: 'LAC',\n    25: 'SF', 26: 'SEA', 27: 'TB', 28: 'WSH', 29: 'CAR', 30: 'JAX', 33: 'BAL', 34: 'HOU'\n  };\n  \n  return TEAM_MAP[teamId] || 'FA';\n} ", "import { DatabaseService } from '../utils/db';\nimport { fetchLeagueData, extractLeagueSettings } from '../services/espn';\n\nexport class LeagueHandler {\n  private db: DatabaseService;\n\n  constructor(db: DatabaseService) {\n    this.db = db;\n  }\n\n  async handlePost(request: Request): Promise<Response> {\n    try {\n      const body = await request.json() as any;\n      const { userId, leagueId, scoringJson, rosterJson, keeperRulesJson, auctionBudget, waiverBudget } = body;\n\n      if (!userId || !leagueId) {\n        return new Response(\n          JSON.stringify({ error: 'userId and leagueId are required' }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      await this.db.upsertLeagueSettings(\n        userId,\n        leagueId,\n        scoringJson || '{}',\n        rosterJson || '{}',\n        keeperRulesJson || '{}',\n        auctionBudget || 0,\n        waiverBudget || 0\n      );\n\n      return new Response(\n        JSON.stringify({ success: true, message: 'League settings saved' }),\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('League POST error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Failed to save league settings' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n\n  async handleGet(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const userId = url.searchParams.get('userId');\n      const leagueId = url.searchParams.get('leagueId');\n\n      if (!userId || !leagueId) {\n        return new Response(\n          JSON.stringify({ error: 'userId and leagueId are required' }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      const settings = await this.db.getLeagueSettings(userId, leagueId);\n\n      if (!settings) {\n        return new Response(\n          JSON.stringify({ error: 'League settings not found' }),\n          { status: 404, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      return new Response(\n        JSON.stringify(settings),\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('League GET error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Failed to get league settings' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n\n  async handleGetLeagueSettings(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const pathParts = url.pathname.split('/');\n      \n      // Extract leagueId from path: /league/:leagueId/settings\n      const leagueIdIndex = pathParts.indexOf('league') + 1;\n      const leagueId = pathParts[leagueIdIndex];\n\n      if (!leagueId) {\n        return new Response(\n          JSON.stringify({ error: 'leagueId is required in URL path' }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      console.log(`Fetching league settings for league ${leagueId}...`);\n\n      // Fetch league data from ESPN\n      const leagueData = await fetchLeagueData(leagueId);\n      \n      // Extract league settings\n      const settings = extractLeagueSettings(leagueData);\n\n      return new Response(\n        JSON.stringify({\n          success: true,\n          league_id: leagueId,\n          settings: settings\n        }),\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('League settings GET error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Failed to fetch league settings' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n} ", "// Sleeper API service for fetching player data\n// Documentation: https://docs.sleeper.com\n\nconst SLEEPER_BASE_URL = 'https://api.sleeper.app/v1';\n\nexport interface SleeperPlayer {\n  player_id: string;\n  full_name: string;\n  position: string;\n  team: string | null;\n  status: string | null;\n  active: boolean;\n  espn_id: number | null;\n  \n  // Player details\n  age: number | null;\n  years_exp: number | null;\n  college: string | null;\n  weight: string | null;\n  height: string | null;\n  number: number | null;\n  \n  // Fantasy data\n  fantasy_positions: string[] | null;\n  fantasy_data_id: number | null;\n  search_rank: number | null;\n  \n  // Injury/Status data\n  injury_status: string | null;\n  injury_start_date: string | null;\n  injury_notes: string | null;\n  practice_participation: string | null;\n  injury_body_part: string | null;\n  practice_description: string | null;\n  \n  // Team/Depth Chart\n  depth_chart_position: string | null;\n  depth_chart_order: number | null;\n  \n  // External IDs\n  yahoo_id: number | null;\n  rotowire_id: number | null;\n  rotoworld_id: number | null;\n  sportradar_id: string | null;\n  \n  // Additional Sleeper fields\n  first_name: string | null;\n  last_name: string | null;\n  birth_date: string | null;\n  birth_city: string | null;\n  birth_state: string | null;\n  birth_country: string | null;\n  high_school: string | null;\n  hashtag: string | null;\n  team_abbr: string | null;\n  team_changed_at: string | null;\n  gsis_id: string | null;\n  swish_id: number | null;\n  stats_id: number | null;\n  oddsjam_id: string | null;\n  opta_id: string | null;\n  pandascore_id: string | null;\n  sport: string | null;\n  news_updated: number | null;\n  search_first_name: string | null;\n  search_last_name: string | null;\n  search_full_name: string | null;\n  metadata: any | null;\n  competitions: any | null;\n}\n\nexport interface SleeperPlayersResponse {\n  [playerId: string]: SleeperPlayer;\n}\n\nexport interface TrendingPlayer {\n  player_id: string;\n  count: number;\n}\n\n// Fetch all NFL players from Sleeper API\nexport async function fetchAllPlayers(): Promise<SleeperPlayersResponse> {\n  const url = `${SLEEPER_BASE_URL}/players/nfl`;\n  \n  try {\n    const response = await fetch(url);\n    \n    if (response.status === 429) {\n      throw new Error('Sleeper API rate limited \u2014 please try again shortly.');\n    }\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch Sleeper player data: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error('Failed to fetch player data from Sleeper');\n  }\n}\n\n// Fetch trending players (adds or drops)\nexport async function fetchTrendingPlayers(\n  type: 'add' | 'drop' = 'add',\n  lookbackHours: number = 24\n): Promise<TrendingPlayer[]> {\n  const url = `${SLEEPER_BASE_URL}/players/nfl/trending/${type}?lookback_hours=${lookbackHours}`;\n  \n  try {\n    const response = await fetch(url);\n    \n    if (response.status === 429) {\n      throw new Error('Sleeper API rate limited \u2014 please try again shortly.');\n    }\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch trending players: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error('Failed to fetch trending players from Sleeper');\n  }\n}\n\n// Fetch all players without development filtering\nexport async function fetchAllPlayersComplete(): Promise<SleeperPlayer[]> {\n  const players = await fetchAllPlayers();\n  const allPlayers: SleeperPlayer[] = [];\n  \n  for (const [playerId, player] of Object.entries(players)) {\n    // Only include active players\n    if (!player.active) continue;\n    \n    allPlayers.push(player);\n  }\n  \n  return allPlayers;\n}\n\n// Filter and limit players for development\nexport function filterPlayersForDevelopment(players: SleeperPlayersResponse): SleeperPlayer[] {\n  const validPositions = ['QB', 'RB', 'WR', 'TE'];\n  const filteredPlayers: SleeperPlayer[] = [];\n  \n  for (const [playerId, player] of Object.entries(players)) {\n    // Only include active players\n    if (!player.active) continue;\n    \n    // Only include valid positions\n    if (!validPositions.includes(player.position)) continue;\n    \n    // Limit to ~200 players for development\n    if (filteredPlayers.length >= 200) break;\n    \n    filteredPlayers.push(player);\n  }\n  \n  return filteredPlayers;\n}\n\n// Validate required fields for a player\nexport function validatePlayer(player: SleeperPlayer): { isValid: boolean; missingFields: string[] } {\n  const requiredFields = ['full_name', 'position', 'player_id'];\n  const missingFields: string[] = [];\n  \n  for (const field of requiredFields) {\n    if (!player[field]) {\n      missingFields.push(field);\n    }\n  }\n  \n  return {\n    isValid: missingFields.length === 0,\n    missingFields\n  };\n}\n\n// Transform Sleeper player data to our database format\nexport function transformSleeperPlayer(player: SleeperPlayer): any {\n  return {\n    sleeper_id: player.player_id,\n    espn_id: player.espn_id ? player.espn_id.toString() : `SLEEPER_${player.player_id}`, // Use real ESPN ID if available\n    name: player.full_name,\n    position: player.position,\n    team: player.team || 'FA', // Use 'FA' (Free Agent) if no team\n    status: player.status || 'Active',\n    bye_week: null, // Sleeper API doesn't provide bye week data\n\n    // Player details\n    age: player.age,\n    years_exp: player.years_exp,\n    college: player.college,\n    weight: player.weight,\n    height: player.height,\n    jersey_number: player.number,\n\n    // Fantasy data\n    fantasy_positions: player.fantasy_positions ? JSON.stringify(player.fantasy_positions) : null,\n    fantasy_data_id: player.fantasy_data_id,\n    search_rank: player.search_rank,\n\n    // Injury/Status data\n    injury_status: player.injury_status,\n    injury_start_date: player.injury_start_date,\n    injury_notes: player.injury_notes,\n    practice_participation: player.practice_participation,\n    injury_body_part: player.injury_body_part,\n    practice_description: player.practice_description,\n\n    // Team/Depth Chart\n    depth_chart_position: player.depth_chart_position,\n    depth_chart_order: player.depth_chart_order,\n\n    // External IDs\n    yahoo_id: player.yahoo_id,\n    rotowire_id: player.rotowire_id,\n    rotoworld_id: player.rotoworld_id,\n    sportradar_id: player.sportradar_id,\n\n    // Additional Sleeper fields\n    first_name: player.first_name,\n    last_name: player.last_name,\n    birth_date: player.birth_date,\n    birth_city: player.birth_city,\n    birth_state: player.birth_state,\n    birth_country: player.birth_country,\n    high_school: player.high_school,\n    hashtag: player.hashtag,\n    team_abbr: player.team_abbr,\n    team_changed_at: player.team_changed_at,\n    gsis_id: player.gsis_id,\n    swish_id: player.swish_id,\n    stats_id: player.stats_id,\n    oddsjam_id: player.oddsjam_id,\n    opta_id: player.opta_id,\n    pandascore_id: player.pandascore_id,\n    sport: player.sport,\n    news_updated: player.news_updated,\n    search_first_name: player.search_first_name,\n    search_last_name: player.search_last_name,\n    search_full_name: player.search_full_name,\n    metadata: player.metadata ? JSON.stringify(player.metadata) : null,\n    competitions: player.competitions ? JSON.stringify(player.competitions) : null\n  };\n} ", "const FANTASY_PROS_BASE_URL = 'https://api.fantasypros.com/public/v2/json';\n\nexport interface FantasyProsProjection {\n  player_id: string;\n  name: string;\n  position: string;\n  team: string;\n  week: number;\n  season: number;\n  projected_points: number;\n  source: string;\n}\n\nexport interface FantasyProsECR {\n  player_id: string;\n  name: string;\n  position: string;\n  team: string;\n  ecr_rank: number;\n  tier: number;\n  position_rank: number;\n  value_over_replacement: number;\n}\n\nexport interface FantasyProsAuctionValue {\n  player_id: string;\n  name: string;\n  position: string;\n  team: string;\n  auction_value: number;\n  tier: number;\n}\n\nexport interface FantasyProsSOS {\n  player_id: string;\n  name: string;\n  position: string;\n  team: string;\n  sos_rank: number;\n}\n\nexport interface FantasyProsPlayer {\n  player_id: string;\n  name: string;\n  position: string;\n  team: string;\n  filename: string;\n  headshot_url?: string;\n  injury_status?: string;\n  injury_type?: string;\n  injury_update_date?: string;\n  espn_id?: string;\n  yahoo_id?: string;\n  rotowire_id?: string;\n  rotoworld_id?: string;\n  gsis_id?: string;\n}\n\nexport interface FantasyProsNews {\n  id: string;\n  player_id: string;\n  title: string;\n  content: string;\n  date: string;\n  type: string;\n}\n\nexport interface FantasyProsInjury {\n  player_id: string;\n  name: string;\n  position: string;\n  team: string;\n  injury_status: string;\n  injury_type: string;\n  injury_update_date: string;\n  practice_report_injury_type?: string;\n}\n\nexport interface FantasyProsRanking {\n  player_id: string;\n  name: string;\n  position: string;\n  team: string;\n  rank: number;\n  tier: number;\n  position_rank: number;\n  ranking_type: string;\n}\n\nexport interface FantasyProsExpert {\n  id: string;\n  name: string;\n  organization: string;\n  accuracy_score?: number;\n}\n\nexport interface FantasyProsPlayerPoints {\n  player_id: string;\n  name: string;\n  position: string;\n  team: string;\n  week: number;\n  season: number;\n  points: number;\n  points_ppr: number;\n  points_half: number;\n}\n\n// Normalize player names for matching\nexport function normalizePlayerName(name: string): string {\n  if (!name) return '';\n  return name.toLowerCase().replace(/[^a-z0-9]/g, '');\n}\n\n// Rate limiting helper\nlet lastRequestTime = 0;\nconst MIN_REQUEST_INTERVAL = 1000; // 1 second\nlet dailyRequestCount = 0;\nconst MAX_DAILY_REQUESTS = 100;\n\n// Manual reset function for daily count\nexport function resetFantasyProsDailyCount() {\n  dailyRequestCount = 0;\n  console.log('Daily FantasyPros API request count manually reset to 0');\n}\n\nasync function rateLimitedRequest(url: string, apiKey: string): Promise<any> {\n  // Check daily limit\n  if (dailyRequestCount >= MAX_DAILY_REQUESTS) {\n    throw new Error('Daily FantasyPros API request limit exceeded (100 requests/day)');\n  }\n  \n  const now = Date.now();\n  const timeSinceLastRequest = now - lastRequestTime;\n  \n  if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {\n    const delay = MIN_REQUEST_INTERVAL - timeSinceLastRequest;\n    console.log(`Rate limiting: waiting ${delay}ms before next request`);\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n  \n  lastRequestTime = Date.now();\n  dailyRequestCount++;\n  \n  console.log(`Making FantasyPros API request #${dailyRequestCount}/100 to: ${url}`);\n  console.log(`API Key (first 8 chars): ${apiKey.substring(0, 8)}...`);\n  \n  const response = await fetch(url, {\n    headers: {\n      'X-API-Key': apiKey,\n      'Content-Type': 'application/json',\n      'User-Agent': 'Fantasy-Command-Center/1.0',\n    },\n  });\n  \n  console.log(`FantasyPros API response status: ${response.status} ${response.statusText}`);\n  \n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(`FantasyPros API error response: ${errorText}`);\n    throw new Error(`FantasyPros API error: ${response.status} ${response.statusText} - ${errorText}`);\n  }\n  \n  return response.json();\n}\n\nexport async function fetchFantasyProsProjections(apiKey: string, week?: number, season?: number): Promise<FantasyProsProjection[]> {\n  // Focus on the most important positions to minimize API calls\n  const positions = ['QB', 'RB', 'WR', 'TE']; // Removed K, DST to save API calls\n  let allProjections: FantasyProsProjection[] = [];\n  \n  for (const position of positions) {\n    try {\n      let url = `${FANTASY_PROS_BASE_URL}/nfl/${season || 2024}/projections?position=${position}`;\n      if (week !== undefined) {\n        url += `&week=${week}`;\n      } else {\n        // Use week=0 for preseason projections if no week specified\n        url += `&week=0`;\n      }\n      console.log(`Making projections request to: ${url}`);\n      const data = await rateLimitedRequest(url, apiKey);\n      \n      // Transform the response to match our interface\n      console.log(`Raw ${position} projections response:`, JSON.stringify(data, null, 2));\n      const projections = data.players?.map((item: any) => {\n        // Look for fantasy points in the stats array\n        const stats = Array.isArray(item.stats) ? item.stats : [];\n        const fpts = stats.find((stat: any) => stat.label === 'FPTS' || stat.label === 'Fantasy Points');\n        \n        console.log(`Processing ${item.name}: stats=`, stats, 'fpts=', fpts);\n        \n        return {\n          player_id: item.fpid?.toString(),\n          name: item.name,\n          position: item.position_id,\n          team: item.team_id,\n          week: week !== undefined ? week : 0,\n          season: season || 2024,\n          projected_points: fpts?.value || 0,\n          source: 'FantasyPros',\n        };\n      }) || [];\n      \n      allProjections = allProjections.concat(projections);\n      console.log(`Fetched ${projections.length} ${position} projections`);\n    } catch (error) {\n      console.log(`Failed to fetch ${position} projections: ${error}`);\n      continue;\n    }\n  }\n  \n  return allProjections;\n}\n\nexport async function fetchFantasyProsECR(apiKey: string, week?: number, season?: number): Promise<FantasyProsECR[]> {\n  // Focus on the most important positions to minimize API calls\n  const positions = ['QB', 'RB', 'WR', 'TE']; // Removed K, DST to save API calls\n  let allECR: FantasyProsECR[] = [];\n  \n  for (const position of positions) {\n    try {\n      const params = new URLSearchParams();\n      params.append('position', position);\n      if (week !== undefined) {\n        params.append('week', week.toString());\n      }\n      \n      const url = `${FANTASY_PROS_BASE_URL}/nfl/${season || 2024}/consensus-rankings?${params}`;\n      console.log(`Making ECR request to: ${url}`);\n      const data = await rateLimitedRequest(url, apiKey);\n      \n      console.log(`Raw ECR response for ${position}:`, JSON.stringify(data, null, 2));\n      \n      // Transform the response to match our interface\n      const ecrData = data.rankings?.map((item: any) => {\n        console.log(`Processing ECR ${item.name}: rank=${item.rank}, tier=${item.tier}`);\n        return {\n          player_id: item.fpid?.toString(),\n          name: item.name,\n          position: item.position_id,\n          team: item.team_id,\n          ecr_rank: item.rank,\n          tier: item.tier,\n          position_rank: item.pos_rank,\n          value_over_replacement: item.vor,\n        };\n      }) || [];\n      \n      allECR = allECR.concat(ecrData);\n      console.log(`Fetched ${ecrData.length} ${position} ECR rankings`);\n    } catch (error) {\n      console.log(`Failed to fetch ${position} ECR: ${error}`);\n      continue;\n    }\n  }\n  \n  return allECR;\n}\n\nexport async function fetchFantasyProsAuctionValues(apiKey: string, season?: number): Promise<FantasyProsAuctionValue[]> {\n  // Auction values not available in public API, return empty array\n  console.log('Auction values not available in public FantasyPros API');\n  return [];\n}\n\nexport async function fetchFantasyProsSOS(apiKey: string, season?: number): Promise<FantasyProsSOS[]> {\n  // Schedule strength not available in public API, return empty array\n  console.log('Schedule strength not available in public FantasyPros API');\n  return [];\n}\n\nexport async function fetchFantasyProsPlayers(apiKey: string, sport: string = 'nfl'): Promise<FantasyProsPlayer[]> {\n  const url = `${FANTASY_PROS_BASE_URL}/${sport}/players?external_ids=espn:yahoo:rotowire:rotoworld:nfl`;\n  const data = await rateLimitedRequest(url, apiKey);\n  \n  return data.players?.map((item: any) => ({\n    player_id: item.fpid?.toString(),\n    name: item.name,\n    position: item.position_id,\n    team: item.team_id,\n    filename: item.filename,\n    headshot_url: item.headshot_url,\n    injury_status: item.injury_status,\n    injury_type: item.injury_type,\n    injury_update_date: item.injury_update_date,\n    espn_id: item.espn_id,\n    yahoo_id: item.yahoo_id,\n    rotowire_id: item.rotowire_id,\n    rotoworld_id: item.rotoworld_id,\n    gsis_id: item.nfl_id,\n  })) || [];\n}\n\nexport async function fetchFantasyProsNews(apiKey: string, sport: string = 'nfl', limit: number = 50): Promise<FantasyProsNews[]> {\n  const params = new URLSearchParams();\n  params.append('limit', limit.toString());\n  \n  const url = `${FANTASY_PROS_BASE_URL}/${sport}/news?${params}`;\n  const data = await rateLimitedRequest(url, apiKey);\n  \n  return data.news?.map((item: any) => ({\n    id: item.id?.toString(),\n    player_id: item.player_id?.toString(),\n    title: item.title,\n    content: item.content,\n    date: item.date,\n    type: item.type,\n  })) || [];\n}\n\nexport async function fetchFantasyProsInjuries(apiKey: string, sport: string = 'nfl'): Promise<FantasyProsInjury[]> {\n  const url = `${FANTASY_PROS_BASE_URL}/${sport}/injuries`;\n  const data = await rateLimitedRequest(url, apiKey);\n  \n  return data.injuries?.map((item: any) => ({\n    player_id: item.fpid?.toString(),\n    name: item.name,\n    position: item.position_id,\n    team: item.team_id,\n    injury_status: item.injury_status,\n    injury_type: item.injury_type,\n    injury_update_date: item.injury_update_date,\n    practice_report_injury_type: item.practice_report_injury_type,\n  })) || [];\n}\n\nexport async function fetchFantasyProsRankings(apiKey: string, season: number = 2024, sport: string = 'nfl'): Promise<FantasyProsRanking[]> {\n  const url = `${FANTASY_PROS_BASE_URL}/${sport}/${season}/rankings`;\n  const data = await rateLimitedRequest(url, apiKey);\n  \n  return data.rankings?.map((item: any) => ({\n    player_id: item.fpid?.toString(),\n    name: item.name,\n    position: item.position_id,\n    team: item.team_id,\n    rank: item.rank,\n    tier: item.tier,\n    position_rank: item.pos_rank,\n    ranking_type: item.ranking_type,\n  })) || [];\n}\n\nexport async function fetchFantasyProsConsensusRankings(apiKey: string, season: number = 2024, sport: string = 'nfl'): Promise<FantasyProsRanking[]> {\n  const url = `${FANTASY_PROS_BASE_URL}/${sport}/${season}/consensus-rankings`;\n  const data = await rateLimitedRequest(url, apiKey);\n  \n  return data.rankings?.map((item: any) => ({\n    player_id: item.fpid?.toString(),\n    name: item.name,\n    position: item.position_id,\n    team: item.team_id,\n    rank: item.rank,\n    tier: item.tier,\n    position_rank: item.pos_rank,\n    ranking_type: 'consensus',\n  })) || [];\n}\n\nexport async function fetchFantasyProsExperts(apiKey: string, season: number = 2024, sport: string = 'nfl'): Promise<FantasyProsExpert[]> {\n  const url = `${FANTASY_PROS_BASE_URL}/${sport}/${season}/rankings/experts`;\n  const data = await rateLimitedRequest(url, apiKey);\n  \n  return data.experts?.map((item: any) => ({\n    id: item.id?.toString(),\n    name: item.name,\n    organization: item.organization,\n    accuracy_score: item.accuracy_score,\n  })) || [];\n}\n\nexport async function fetchFantasyProsPlayerPoints(apiKey: string, season: number = 2024, week?: number): Promise<FantasyProsPlayerPoints[]> {\n  const params = new URLSearchParams();\n  if (week) params.append('week', week.toString());\n  \n  const url = `${FANTASY_PROS_BASE_URL}/nfl/${season}/player-points?${params}`;\n  const data = await rateLimitedRequest(url, apiKey);\n  \n  return data.players?.map((item: any) => ({\n    player_id: item.fpid?.toString(),\n    name: item.name,\n    position: item.position_id,\n    team: item.team_id,\n    week: week || 0,\n    season: season,\n    points: item.points,\n    points_ppr: item.points_ppr,\n    points_half: item.points_half,\n  })) || [];\n}\n\n// Match FantasyPros data to players using normalized names\nexport function matchFantasyProsToPlayers(\n  fantasyProsData: any[],\n  players: any[]\n): { matched: any[], unmatched: any[] } {\n  // Create maps for all available ID types\n  const gsisIdMap = new Map();\n  const espnIdMap = new Map();\n  const yahooIdMap = new Map();\n  const rotowireIdMap = new Map();\n  const rotoworldIdMap = new Map();\n  const playerNameMap = new Map();\n  \n  // Create maps of IDs to sleeper_id\n  players.forEach(player => {\n    if (player.gsis_id) {\n      gsisIdMap.set(player.gsis_id.toString(), player.sleeper_id);\n    }\n    if (player.espn_id) {\n      espnIdMap.set(player.espn_id.toString(), player.sleeper_id);\n    }\n    if (player.yahoo_id) {\n      yahooIdMap.set(player.yahoo_id.toString(), player.sleeper_id);\n    }\n    if (player.rotowire_id) {\n      rotowireIdMap.set(player.rotowire_id.toString(), player.sleeper_id);\n    }\n    if (player.rotoworld_id) {\n      rotoworldIdMap.set(player.rotoworld_id.toString(), player.sleeper_id);\n    }\n    if (player.search_full_name) {\n      const normalizedName = normalizePlayerName(player.search_full_name);\n      if (normalizedName) {\n        playerNameMap.set(normalizedName, player.sleeper_id);\n      }\n    }\n  });\n  \n  console.log(`Created ID maps - GSIS: ${gsisIdMap.size}, ESPN: ${espnIdMap.size}, Yahoo: ${yahooIdMap.size}, Rotowire: ${rotowireIdMap.size}, Rotoworld: ${rotoworldIdMap.size}, Names: ${playerNameMap.size}`);\n  console.log(`Processing ${fantasyProsData.length} FantasyPros records`);\n  \n  const matched = [];\n  const unmatched = [];\n  \n  fantasyProsData.forEach((item, index) => {\n    let sleeperId = null;\n    let matchMethod = '';\n    \n    // Try ID matching first (more reliable) - in order of preference\n    if (item.gsis_id && gsisIdMap.has(item.gsis_id.toString())) {\n      sleeperId = gsisIdMap.get(item.gsis_id.toString());\n      matchMethod = 'gsis_id';\n    } else if (item.espn_id && espnIdMap.has(item.espn_id.toString())) {\n      sleeperId = espnIdMap.get(item.espn_id.toString());\n      matchMethod = 'espn_id';\n    } else if (item.yahoo_id && yahooIdMap.has(item.yahoo_id.toString())) {\n      sleeperId = yahooIdMap.get(item.yahoo_id.toString());\n      matchMethod = 'yahoo_id';\n    } else if (item.rotowire_id && rotowireIdMap.has(item.rotowire_id.toString())) {\n      sleeperId = rotowireIdMap.get(item.rotowire_id.toString());\n      matchMethod = 'rotowire_id';\n    } else if (item.rotoworld_id && rotoworldIdMap.has(item.rotoworld_id.toString())) {\n      sleeperId = rotoworldIdMap.get(item.rotoworld_id.toString());\n      matchMethod = 'rotoworld_id';\n    } else if (item.name) {\n      // Fallback to name matching\n      const normalizedName = normalizePlayerName(item.name);\n      if (normalizedName && playerNameMap.has(normalizedName)) {\n        sleeperId = playerNameMap.get(normalizedName);\n        matchMethod = 'name';\n      }\n    }\n    \n    if (sleeperId) {\n      matched.push({\n        ...item,\n        sleeper_id: sleeperId,\n        match_method: matchMethod,\n      });\n    } else {\n      unmatched.push(item);\n      // Log first few unmatched items for debugging\n      if (index < 5) {\n        console.log(`Unmatched: \"${item.name}\" (GSIS: ${item.gsis_id}, ESPN: ${item.espn_id}, Yahoo: ${item.yahoo_id}, Rotowire: ${item.rotowire_id}, Rotoworld: ${item.rotoworld_id})`);\n      }\n    }\n  });\n  \n  console.log(`Matched: ${matched.length}, Unmatched: ${unmatched.length}`);\n  return { matched, unmatched };\n}\n\n// Match FantasyPros data to players and return player updates for direct table updates\nexport function matchFantasyProsToPlayerUpdates(\n  fantasyProsData: any[],\n  players: any[]\n): { matched: any[], unmatched: any[] } {\n  // Create maps for all available ID types\n  const gsisIdMap = new Map();\n  const espnIdMap = new Map();\n  const yahooIdMap = new Map();\n  const rotowireIdMap = new Map();\n  const rotoworldIdMap = new Map();\n  const playerNameMap = new Map();\n  \n  // Create maps of IDs to sleeper_id\n  players.forEach(player => {\n    if (player.gsis_id) {\n      gsisIdMap.set(player.gsis_id.toString(), player.sleeper_id);\n    }\n    if (player.espn_id) {\n      espnIdMap.set(player.espn_id.toString(), player.sleeper_id);\n    }\n    if (player.yahoo_id) {\n      yahooIdMap.set(player.yahoo_id.toString(), player.sleeper_id);\n    }\n    if (player.rotowire_id) {\n      rotowireIdMap.set(player.rotowire_id.toString(), player.sleeper_id);\n    }\n    if (player.rotoworld_id) {\n      rotoworldIdMap.set(player.rotoworld_id.toString(), player.sleeper_id);\n    }\n    if (player.search_full_name) {\n      const normalizedName = normalizePlayerName(player.search_full_name);\n      if (normalizedName) {\n        playerNameMap.set(normalizedName, player.sleeper_id);\n      }\n    }\n  });\n  \n  console.log(`Created ID maps for player updates - GSIS: ${gsisIdMap.size}, ESPN: ${espnIdMap.size}, Yahoo: ${yahooIdMap.size}, Rotowire: ${rotowireIdMap.size}, Rotoworld: ${rotoworldIdMap.size}, Names: ${playerNameMap.size}`);\n  console.log(`Processing ${fantasyProsData.length} FantasyPros records for player updates`);\n  \n  const matched = [];\n  const unmatched = [];\n  \n  fantasyProsData.forEach((item, index) => {\n    let sleeperId = null;\n    let matchMethod = '';\n    \n    // Try ID matching first (more reliable) - in order of preference\n    if (item.gsis_id && gsisIdMap.has(item.gsis_id.toString())) {\n      sleeperId = gsisIdMap.get(item.gsis_id.toString());\n      matchMethod = 'gsis_id';\n    } else if (item.espn_id && espnIdMap.has(item.espn_id.toString())) {\n      sleeperId = espnIdMap.get(item.espn_id.toString());\n      matchMethod = 'espn_id';\n    } else if (item.yahoo_id && yahooIdMap.has(item.yahoo_id.toString())) {\n      sleeperId = yahooIdMap.get(item.yahoo_id.toString());\n      matchMethod = 'yahoo_id';\n    } else if (item.rotowire_id && rotowireIdMap.has(item.rotowire_id.toString())) {\n      sleeperId = rotowireIdMap.get(item.rotowire_id.toString());\n      matchMethod = 'rotowire_id';\n    } else if (item.rotoworld_id && rotoworldIdMap.has(item.rotoworld_id.toString())) {\n      sleeperId = rotoworldIdMap.get(item.rotoworld_id.toString());\n      matchMethod = 'rotoworld_id';\n    } else if (item.name) {\n      // Fallback to name matching\n      const normalizedName = normalizePlayerName(item.name);\n      if (normalizedName && playerNameMap.has(normalizedName)) {\n        sleeperId = playerNameMap.get(normalizedName);\n        matchMethod = 'name';\n      }\n    }\n    \n    if (sleeperId) {\n      // Create player update object with FantasyPros data mapped to player fields\n      const playerUpdate = {\n        sleeper_id: sleeperId,\n        search_rank: item.ecr_rank || null,\n        tier: item.tier || null,\n        position_rank: item.position_rank || null,\n        value_over_replacement: item.value_over_replacement || null,\n        auction_value: item.auction_value || null,\n        projected_points: item.projected_points || null,\n        sos_rank: item.sos_rank || null,\n        match_method: matchMethod\n      };\n      \n      matched.push(playerUpdate);\n    } else {\n      unmatched.push(item);\n      // Log first few unmatched items for debugging\n      if (index < 5) {\n        console.log(`Unmatched for player update: \"${item.name}\" (GSIS: ${item.gsis_id}, ESPN: ${item.espn_id}, Yahoo: ${item.yahoo_id}, Rotowire: ${item.rotowire_id}, Rotoworld: ${item.rotoworld_id})`);\n      }\n    }\n  });\n  \n  console.log(`Player updates - Matched: ${matched.length}, Unmatched: ${unmatched.length}`);\n  return { matched, unmatched };\n}\n", "export interface NFLGame {\n  game_id: string;\n  week: number;\n  game_date: string;\n  kickoff_time?: string;\n  home_team: string;\n  away_team: string;\n  location?: string;\n  network?: string;\n  game_type: string;\n}\n\n// Team name to abbreviation mapping\nconst TEAM_MAPPING: { [key: string]: string } = {\n  'Arizona Cardinals': 'ARI',\n  'Atlanta Falcons': 'ATL',\n  'Baltimore Ravens': 'BAL',\n  'Buffalo Bills': 'BUF',\n  'Carolina Panthers': 'CAR',\n  'Chicago Bears': 'CHI',\n  'Cincinnati Bengals': 'CIN',\n  'Cleveland Browns': 'CLE',\n  'Dallas Cowboys': 'DAL',\n  'Denver Broncos': 'DEN',\n  'Detroit Lions': 'DET',\n  'Green Bay Packers': 'GB',\n  'Houston Texans': 'HOU',\n  'Indianapolis Colts': 'IND',\n  'Jacksonville Jaguars': 'JAX',\n  'Kansas City Chiefs': 'KC',\n  'Las Vegas Raiders': 'LV',\n  'Los Angeles Chargers': 'LAC',\n  'Los Angeles Rams': 'LAR',\n  'Miami Dolphins': 'MIA',\n  'Minnesota Vikings': 'MIN',\n  'New England Patriots': 'NE',\n  'New Orleans Saints': 'NO',\n  'New York Giants': 'NYG',\n  'New York Jets': 'NYJ',\n  'Philadelphia Eagles': 'PHI',\n  'Pittsburgh Steelers': 'PIT',\n  'San Francisco 49ers': 'SF',\n  'Seattle Seahawks': 'SEA',\n  'Tampa Bay Buccaneers': 'TB',\n  'Tennessee Titans': 'TEN',\n  'Washington Commanders': 'WAS',\n  // Common variations\n  'Cardinals': 'ARI',\n  'Falcons': 'ATL',\n  'Ravens': 'BAL',\n  'Bills': 'BUF',\n  'Panthers': 'CAR',\n  'Bears': 'CHI',\n  'Bengals': 'CIN',\n  'Browns': 'CLE',\n  'Cowboys': 'DAL',\n  'Broncos': 'DEN',\n  'Lions': 'DET',\n  'Packers': 'GB',\n  'Texans': 'HOU',\n  'Colts': 'IND',\n  'Jaguars': 'JAX',\n  'Chiefs': 'KC',\n  'Raiders': 'LV',\n  'Chargers': 'LAC',\n  'Rams': 'LAR',\n  'Dolphins': 'MIA',\n  'Vikings': 'MIN',\n  'Patriots': 'NE',\n  'Saints': 'NO',\n  'Giants': 'NYG',\n  'Jets': 'NYJ',\n  'Eagles': 'PHI',\n  'Steelers': 'PIT',\n  '49ers': 'SF',\n  'Seahawks': 'SEA',\n  'Buccaneers': 'TB',\n  'Titans': 'TEN',\n  'Commanders': 'WAS'\n};\n\nexport function normalizeTeamName(teamName: string): string {\n  const normalized = teamName.trim();\n  \n  // Direct mapping\n  if (TEAM_MAPPING[normalized]) {\n    return TEAM_MAPPING[normalized];\n  }\n  \n  // Try partial matches\n  for (const [fullName, abbrev] of Object.entries(TEAM_MAPPING)) {\n    if (fullName.toLowerCase().includes(normalized.toLowerCase()) || \n        normalized.toLowerCase().includes(fullName.toLowerCase())) {\n      return abbrev;\n    }\n  }\n  \n  console.warn(`Could not normalize team name: ${teamName}`);\n  return teamName; // Return original if no match found\n}\n\nexport function generateGameId(gameDate: string, homeTeam: string, awayTeam: string, week?: number): string {\n  // Format: YYYY-MM-DD-HOME-AWAY-WEEK (if week provided)\n  if (week) {\n    return `${gameDate}-${homeTeam}-${awayTeam}-W${week}`;\n  }\n  // Format: YYYY-MM-DD-HOME-AWAY (fallback)\n  return `${gameDate}-${homeTeam}-${awayTeam}`;\n}\n\nexport async function scrapeNFLSchedule(): Promise<NFLGame[]> {\n  try {\n    console.log('Starting NFL schedule scrape...');\n    \n    // Try to scrape from the NFL website\n    try {\n      return await scrapeNFLScheduleFromWeb();\n    } catch (webError) {\n      console.warn('Web scraping failed, falling back to test data:', webError);\n      return getTestScheduleData();\n    }\n    \n  } catch (error) {\n    console.error('Error scraping NFL schedule:', error);\n    throw new Error(`Failed to scrape NFL schedule: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nfunction getTestScheduleData(): NFLGame[] {\n  // Generate complete 18-week NFL schedule programmatically\n  const testGames: NFLGame[] = [];\n  \n  // All 32 NFL teams\n  const teams = [\n    'ARI', 'ATL', 'BAL', 'BUF', 'CAR', 'CHI', 'CIN', 'CLE',\n    'DAL', 'DEN', 'DET', 'GB', 'HOU', 'IND', 'JAX', 'KC',\n    'LAC', 'LAR', 'LV', 'MIA', 'MIN', 'NE', 'NO', 'NYG',\n    'NYJ', 'PHI', 'PIT', 'SF', 'SEA', 'TB', 'TEN', 'WAS'\n  ];\n  \n  // Stadium locations for each team\n  const stadiums: { [key: string]: string } = {\n    'ARI': 'State Farm Stadium, Glendale, AZ',\n    'ATL': 'Mercedes-Benz Stadium, Atlanta, GA',\n    'BAL': 'M&T Bank Stadium, Baltimore, MD',\n    'BUF': 'Highmark Stadium, Orchard Park, NY',\n    'CAR': 'Bank of America Stadium, Charlotte, NC',\n    'CHI': 'Soldier Field, Chicago, IL',\n    'CIN': 'Paycor Stadium, Cincinnati, OH',\n    'CLE': 'FirstEnergy Stadium, Cleveland, OH',\n    'DAL': 'AT&T Stadium, Arlington, TX',\n    'DEN': 'Empower Field at Mile High, Denver, CO',\n    'DET': 'Ford Field, Detroit, MI',\n    'GB': 'Lambeau Field, Green Bay, WI',\n    'HOU': 'NRG Stadium, Houston, TX',\n    'IND': 'Lucas Oil Stadium, Indianapolis, IN',\n    'JAX': 'TIAA Bank Field, Jacksonville, FL',\n    'KC': 'Arrowhead Stadium, Kansas City, MO',\n    'LAC': 'SoFi Stadium, Inglewood, CA',\n    'LAR': 'SoFi Stadium, Inglewood, CA',\n    'LV': 'Allegiant Stadium, Las Vegas, NV',\n    'MIA': 'Hard Rock Stadium, Miami Gardens, FL',\n    'MIN': 'U.S. Bank Stadium, Minneapolis, MN',\n    'NE': 'Gillette Stadium, Foxborough, MA',\n    'NO': 'Caesars Superdome, New Orleans, LA',\n    'NYG': 'MetLife Stadium, East Rutherford, NJ',\n    'NYJ': 'MetLife Stadium, East Rutherford, NJ',\n    'PHI': 'Lincoln Financial Field, Philadelphia, PA',\n    'PIT': 'Acrisure Stadium, Pittsburgh, PA',\n    'SF': 'Levi\\'s Stadium, Santa Clara, CA',\n    'SEA': 'Lumen Field, Seattle, WA',\n    'TB': 'Raymond James Stadium, Tampa, FL',\n    'TEN': 'Nissan Stadium, Nashville, TN',\n    'WAS': 'FedExField, Landover, MD'\n  };\n  \n  // Generate games for 18 weeks\n  for (let week = 1; week <= 18; week++) {\n    const weekGames = generateWeekGames(week, teams, stadiums);\n    testGames.push(...weekGames);\n  }\n  \n  console.log(`Generated ${testGames.length} complete NFL season games across 18 weeks`);\n  return testGames;\n}\n\nfunction generateWeekGames(week: number, teams: string[], stadiums: { [key: string]: string }): NFLGame[] {\n  const games: NFLGame[] = [];\n  \n  // Calculate base date for the season (first Thursday in September)\n  const baseDate = new Date('2025-09-04'); // Thursday of Week 1\n  const weekStartDate = new Date(baseDate);\n  weekStartDate.setDate(baseDate.getDate() + (week - 1) * 7);\n  \n  // Generate exactly 16 games per week (32 teams / 2 = 16 games)\n  // Use a simple, deterministic approach that ensures unique matchups\n  const teamsCopy = [...teams];\n  \n  // Create matchups based on week number to ensure variety\n  for (let i = 0; i < 16; i++) {\n    // Use week number to create different matchups each week\n    const awayIndex = (i + week) % 32;\n    const homeIndex = (i + week + 16) % 32;\n    \n    const awayTeam = teamsCopy[awayIndex];\n    const homeTeam = teamsCopy[homeIndex];\n    \n    if (!awayTeam || !homeTeam) {\n      console.error(`Could not find teams for game ${i} in week ${week}`);\n      continue;\n    }\n    \n    // Calculate game date based on position in week\n    const gameDate = new Date(weekStartDate);\n    if (i === 0 && week === 1) {\n      // Thursday Night Football for Week 1\n      gameDate.setDate(weekStartDate.getDate() - 1); // Wednesday\n    } else if (i === 15) {\n      // Monday Night Football\n      gameDate.setDate(weekStartDate.getDate() + 3); // Monday\n    } else {\n      // Sunday games\n      gameDate.setDate(weekStartDate.getDate() + 2); // Sunday\n    }\n    \n    // Determine kickoff time and network\n    let kickoffTime: string;\n    let network: string;\n    \n    if (i === 0 && week === 1) {\n      kickoffTime = '20:20';\n      network = 'NBC';\n    } else if (i === 0) {\n      kickoffTime = '20:15';\n      network = 'Prime Video';\n    } else if (i === 15) {\n      kickoffTime = '20:20';\n      network = 'ESPN';\n    } else if (i === 14) {\n      kickoffTime = '20:20';\n      network = 'NBC';\n    } else if (i < 8) {\n      kickoffTime = '13:00';\n      network = i % 2 === 0 ? 'CBS' : 'FOX';\n    } else {\n      kickoffTime = i < 12 ? '16:05' : '16:25';\n      network = i % 2 === 0 ? 'CBS' : 'FOX';\n    }\n    \n    const gameDateStr = gameDate.toISOString().split('T')[0];\n    \n    games.push({\n      game_id: generateGameId(gameDateStr, homeTeam, awayTeam, week),\n      week,\n      game_date: gameDateStr,\n      kickoff_time: kickoffTime,\n      home_team: homeTeam,\n      away_team: awayTeam,\n      location: stadiums[homeTeam],\n      network,\n      game_type: 'Regular'\n    });\n  }\n  \n  return games;\n}\n\n// Actual web scraping implementation\nexport async function scrapeNFLScheduleFromWeb(): Promise<NFLGame[]> {\n  try {\n    console.log('Attempting to scrape NFL schedule from web...');\n    \n    // The NFL website URL\n    const url = 'https://operations.nfl.com/gameday/nfl-schedule/2025-nfl-schedule/';\n    \n    // Make the request\n    const response = await fetch(url, {\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; Fantasy-Command-Center/1.0)',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Language': 'en-US,en;q=0.5',\n        'Accept-Encoding': 'gzip, deflate',\n        'Connection': 'keep-alive',\n        'Upgrade-Insecure-Requests': '1',\n      },\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const html = await response.text();\n    console.log(`Successfully fetched NFL schedule page (${html.length} characters)`);\n    \n    // Parse the HTML to extract game data\n    const games = parseNFLScheduleHTML(html);\n    \n    if (games.length === 0) {\n      throw new Error('No games found in the scraped HTML');\n    }\n    \n    console.log(`Successfully parsed ${games.length} games from NFL website`);\n    return games;\n    \n  } catch (error) {\n    console.error('Web scraping failed:', error);\n    throw new Error(`Failed to scrape NFL website: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nfunction parseNFLScheduleHTML(html: string): NFLGame[] {\n  const games: NFLGame[] = [];\n  \n  try {\n    // This is a simplified parser - in a real implementation, you'd need to adapt\n    // to the actual HTML structure of the NFL website\n    \n    // Look for game data patterns in the HTML\n    // This is a placeholder implementation - the actual parsing would depend on the NFL site structure\n    \n    // Example patterns to look for:\n    // - Game containers with team names\n    // - Date/time information\n    // - Network information\n    // - Stadium/location data\n    \n    console.log('Parsing HTML for game data...');\n    \n    // For now, return empty array to trigger fallback to test data\n    // In a real implementation, you would:\n    // 1. Use regex or DOM parsing to extract game data\n    // 2. Parse team names and normalize them\n    // 3. Extract dates, times, networks, locations\n    // 4. Generate game IDs\n    // 5. Return structured game objects\n    \n    console.log('HTML parsing not yet implemented - using fallback data');\n    return [];\n    \n  } catch (error) {\n    console.error('Error parsing HTML:', error);\n    return [];\n  }\n}\n", "export const stadiumCoordinates = {\n  // AFC Teams\n  BUF: { lat: 42.7737, lon: -78.7869 }, // Highmark Stadium\n  MIA: { lat: 25.9583, lon: -80.2389 }, // Hard Rock Stadium\n  NE: { lat: 42.0909, lon: -71.2643 }, // Gillette Stadium\n  NYJ: { lat: 40.8136, lon: -74.0744 }, // MetLife Stadium\n  BAL: { lat: 39.2783, lon: -76.6227 }, // M&T Bank Stadium\n  CIN: { lat: 39.0955, lon: -84.5160 }, // Paycor Stadium\n  CLE: { lat: 41.5061, lon: -81.6995 }, // FirstEnergy Stadium\n  PIT: { lat: 40.4468, lon: -80.0158 }, // Acrisure Stadium\n  HOU: { lat: 29.6847, lon: -95.4107 }, // NRG Stadium\n  IND: { lat: 39.7601, lon: -86.1639 }, // Lucas Oil Stadium\n  JAX: { lat: 30.3239, lon: -81.6372 }, // TIAA Bank Field\n  TEN: { lat: 36.1663, lon: -86.7714 }, // Nissan Stadium\n  DEN: { lat: 39.7439, lon: -105.0201 }, // Empower Field at Mile High\n  KC: { lat: 39.0490, lon: -94.4839 }, // Arrowhead Stadium\n  LV: { lat: 36.0908, lon: -115.1836 }, // Allegiant Stadium\n  LAC: { lat: 33.9533, lon: -118.3389 }, // SoFi Stadium\n\n  // NFC Teams\n  DAL: { lat: 32.7473, lon: -97.0945 }, // AT&T Stadium\n  NYG: { lat: 40.8136, lon: -74.0744 }, // MetLife Stadium\n  PHI: { lat: 39.9008, lon: -75.1674 }, // Lincoln Financial Field\n  WAS: { lat: 38.9076, lon: -76.8644 }, // FedExField\n  CHI: { lat: 41.8623, lon: -87.6166 }, // Soldier Field\n  DET: { lat: 42.3400, lon: -83.0456 }, // Ford Field\n  GB: { lat: 44.5013, lon: -88.0622 }, // Lambeau Field\n  MIN: { lat: 44.9740, lon: -93.2583 }, // U.S. Bank Stadium\n  ATL: { lat: 33.7553, lon: -84.4006 }, // Mercedes-Benz Stadium\n  CAR: { lat: 35.2253, lon: -80.8431 }, // Bank of America Stadium\n  NO: { lat: 29.9511, lon: -90.0815 }, // Caesars Superdome\n  TB: { lat: 27.9761, lon: -82.5033 }, // Raymond James Stadium\n  ARI: { lat: 33.5276, lon: -112.2626 }, // State Farm Stadium\n  LAR: { lat: 33.9533, lon: -118.3389 }, // SoFi Stadium\n  SF: { lat: 37.4030, lon: -121.9700 }, // Levi's Stadium\n  SEA: { lat: 47.5952, lon: -122.3316 } // Lumen Field\n};\n", "import { stadiumCoordinates } from '../constants/stadiumLocations';\n\nexport interface PlayerMatchup {\n  player_id: number;\n  week: number;\n  game_id: string;\n  opponent_team: string;\n  is_home: boolean;\n  game_date: string;\n  game_time: string;\n  network: string;\n  weather_flag?: string;\n  rest_days?: number;\n  opponent_position_rank?: number;\n  weather_forecast?: string;\n  temperature_low?: number;\n  temperature_high?: number;\n  precipitation_chance?: number;\n  wind_speed?: string;\n}\n\nexport async function generatePlayerMatchupsForWeek(db: any, week: number): Promise<void> {\n  console.log(`Generating player matchups for week ${week}...`);\n\n  // Get schedule for the week\n  console.log(`Fetching schedule for week ${week}...`);\n  let schedule;\n  try {\n    console.log(`Executing query: SELECT * FROM nfl_schedule WHERE week = ${week}`);\n    const stmt = db.prepare(`\n      SELECT * FROM nfl_schedule WHERE week = ?\n    `);\n    const result = await stmt.bind(week).all();\n    schedule = result.results || result;\n    console.log(`Found ${schedule.length} games for week ${week}`);\n  } catch (error) {\n    console.error('Error fetching schedule:', error);\n    throw error;\n  }\n\n  // Get all players with team information\n  console.log('Fetching players with team information...');\n  let players;\n  try {\n    const playersStmt = db.prepare(`\n      SELECT * FROM players WHERE team IS NOT NULL AND team != ''\n    `);\n    const playersResult = await playersStmt.all();\n    players = playersResult.results || playersResult;\n    console.log(`Found ${players.length} players with team information`);\n  } catch (error) {\n    console.error('Error fetching players:', error);\n    throw error;\n  }\n\n  console.log(`Found ${schedule.length} games and ${players.length} players for week ${week}`);\n\n  // Process only the first game for debugging\n  const game = schedule[0];\n  if (!game) {\n    console.log('No games found for this week');\n    return;\n  }\n\n  const homeTeam = game.home_team;\n  const awayTeam = game.away_team;\n  const gameId = game.game_id;\n\n  console.log(`Processing game: ${awayTeam} @ ${homeTeam} (game_id: ${gameId})`);\n\n  const homePlayers = players.filter((p: any) => p.team === homeTeam);\n  const awayPlayers = players.filter((p: any) => p.team === awayTeam);\n\n  console.log(`Found ${homePlayers.length} home players and ${awayPlayers.length} away players`);\n\n  // Process only the first player for debugging\n  const allPlayers = [...homePlayers, ...awayPlayers];\n  if (allPlayers.length === 0) {\n    console.log('No players found for this game');\n    return;\n  }\n\n  const player = allPlayers[0];\n  const isHome = player.team === homeTeam;\n  const opponentTeam = isHome ? awayTeam : homeTeam;\n\n  // Get previous game for rest days calculation (skip for now to debug)\n  let restDays = null;\n\n  // Get opponent defense strength (skip for now to debug)\n  let defenseRank = null;\n\n  // Insert or replace matchup\n  try {\n    console.log(`Inserting matchup for player ${player.sleeper_id}`);\n    \n    // Simplified insert for debugging\n    const insertStmt = db.prepare(`\n      INSERT OR REPLACE INTO player_matchups (\n        player_id, week, game_id, opponent_team, is_home\n      ) VALUES (?, ?, ?, ?, ?)\n    `);\n    await insertStmt.bind(\n      player.sleeper_id,\n      week,\n      gameId,\n      opponentTeam,\n      isHome ? 1 : 0\n    ).run();\n    \n    console.log(`Successfully inserted matchup for player ${player.sleeper_id}`);\n  } catch (error) {\n    console.error(`Error inserting matchup for player ${player.sleeper_id}:`, error);\n  }\n\n  console.log(`Completed generating matchups for week ${week}`);\n}\n\nexport async function enrichWeatherForGame(db: any, game: any): Promise<void> {\n  const { lat, lon } = stadiumCoordinates[game.home_team as keyof typeof stadiumCoordinates] || {};\n  if (!lat || !lon) {\n    console.log(`No coordinates found for ${game.home_team}`);\n    return;\n  }\n\n  try {\n    // Get weather forecast from NOAA API\n    const pointRes = await fetch(`https://api.weather.gov/points/${lat},${lon}`, {\n      headers: { \"User-Agent\": \"FantasyCommandCenter (fantasy-command-center@example.com)\" }\n    });\n\n    if (!pointRes.ok) {\n      console.log(`Failed to get weather points for ${game.home_team}: ${pointRes.status}`);\n      return;\n    }\n\n    const pointData = await pointRes.json();\n    const forecastUrl = pointData.properties?.forecast;\n    \n    if (!forecastUrl) {\n      console.log(`No forecast URL found for ${game.home_team}`);\n      return;\n    }\n\n    const forecastRes = await fetch(forecastUrl, {\n      headers: { \"User-Agent\": \"FantasyCommandCenter\" }\n    });\n\n    if (!forecastRes.ok) {\n      console.log(`Failed to get forecast for ${game.home_team}: ${forecastRes.status}`);\n      return;\n    }\n\n    const forecastData = await forecastRes.json();\n    const periods = forecastData.properties?.periods;\n    \n    if (!periods || periods.length === 0) {\n      console.log(`No forecast periods found for ${game.home_team}`);\n      return;\n    }\n\n    const gameDate = new Date(game.game_date).toDateString();\n    const matchingForecast = periods.find((p: any) => \n      new Date(p.startTime).toDateString() === gameDate\n    );\n\n    if (!matchingForecast) {\n      console.log(`No matching forecast found for game date ${gameDate}`);\n      return;\n    }\n\n    // Parse temperature\n    const temp = matchingForecast.temperature;\n    const tempLow = temp < 60 ? temp : null;\n    const tempHigh = temp > 60 ? temp : null;\n\n    // Update weather data for all players in this game\n    await db.prepare(`\n      UPDATE player_matchups\n      SET\n        weather_forecast = ?,\n        temperature_low = ?,\n        temperature_high = ?,\n        precipitation_chance = ?,\n        wind_speed = ?\n      WHERE game_id = ?\n    `).run(\n      matchingForecast.shortForecast,\n      tempLow,\n      tempHigh,\n      matchingForecast.probabilityOfPrecipitation?.value || null,\n      matchingForecast.windSpeed || null,\n      game.game_id\n    );\n\n    console.log(`Updated weather for ${game.home_team} vs ${game.away_team}: ${matchingForecast.shortForecast}`);\n  } catch (error) {\n    console.error(`Error enriching weather for ${game.home_team}:`, error);\n  }\n}\n\nexport async function syncDefenseStrength(db: any): Promise<void> {\n  console.log('Syncing defense strength from FantasyPros...');\n  \n  try {\n    // This would normally call FantasyPros API\n    // For now, we'll create some sample data\n    const sampleDefenses = [\n      { team: 'SF', ecr_rank: 1, tier: 'Tier 1', pos_rank: 1 },\n      { team: 'DAL', ecr_rank: 2, tier: 'Tier 1', pos_rank: 2 },\n      { team: 'BAL', ecr_rank: 3, tier: 'Tier 1', pos_rank: 3 },\n      { team: 'KC', ecr_rank: 4, tier: 'Tier 2', pos_rank: 4 },\n      { team: 'BUF', ecr_rank: 5, tier: 'Tier 2', pos_rank: 5 },\n      { team: 'NE', ecr_rank: 6, tier: 'Tier 2', pos_rank: 6 },\n      { team: 'CLE', ecr_rank: 7, tier: 'Tier 2', pos_rank: 7 },\n      { team: 'NYJ', ecr_rank: 8, tier: 'Tier 3', pos_rank: 8 },\n      { team: 'PIT', ecr_rank: 9, tier: 'Tier 3', pos_rank: 9 },\n      { team: 'CIN', ecr_rank: 10, tier: 'Tier 3', pos_rank: 10 },\n      { team: 'LAR', ecr_rank: 11, tier: 'Tier 3', pos_rank: 11 },\n      { team: 'PHI', ecr_rank: 12, tier: 'Tier 4', pos_rank: 12 },\n      { team: 'GB', ecr_rank: 13, tier: 'Tier 4', pos_rank: 13 },\n      { team: 'MIN', ecr_rank: 14, tier: 'Tier 4', pos_rank: 14 },\n      { team: 'DET', ecr_rank: 15, tier: 'Tier 4', pos_rank: 15 },\n      { team: 'CHI', ecr_rank: 16, tier: 'Tier 5', pos_rank: 16 },\n      { team: 'ATL', ecr_rank: 17, tier: 'Tier 5', pos_rank: 17 },\n      { team: 'CAR', ecr_rank: 18, tier: 'Tier 5', pos_rank: 18 },\n      { team: 'NO', ecr_rank: 19, tier: 'Tier 5', pos_rank: 19 },\n      { team: 'TB', ecr_rank: 20, tier: 'Tier 6', pos_rank: 20 },\n      { team: 'ARI', ecr_rank: 21, tier: 'Tier 6', pos_rank: 21 },\n      { team: 'SEA', ecr_rank: 22, tier: 'Tier 6', pos_rank: 22 },\n      { team: 'HOU', ecr_rank: 23, tier: 'Tier 6', pos_rank: 23 },\n      { team: 'IND', ecr_rank: 24, tier: 'Tier 7', pos_rank: 24 },\n      { team: 'JAX', ecr_rank: 25, tier: 'Tier 7', pos_rank: 25 },\n      { team: 'TEN', ecr_rank: 26, tier: 'Tier 7', pos_rank: 26 },\n      { team: 'DEN', ecr_rank: 27, tier: 'Tier 7', pos_rank: 27 },\n      { team: 'LV', ecr_rank: 28, tier: 'Tier 8', pos_rank: 28 },\n      { team: 'LAC', ecr_rank: 29, tier: 'Tier 8', pos_rank: 29 },\n      { team: 'NYG', ecr_rank: 30, tier: 'Tier 8', pos_rank: 30 },\n      { team: 'WAS', ecr_rank: 31, tier: 'Tier 8', pos_rank: 31 },\n      { team: 'MIA', ecr_rank: 32, tier: 'Tier 8', pos_rank: 32 }\n    ];\n\n    for (const defense of sampleDefenses) {\n      await db.prepare(`\n        INSERT OR REPLACE INTO defense_strength (team, ecr_rank, tier, pos_rank)\n        VALUES (?, ?, ?, ?)\n      `).run(defense.team, defense.ecr_rank, defense.tier, defense.pos_rank);\n    }\n\n    console.log('Defense strength synced successfully');\n  } catch (error) {\n    console.error('Error syncing defense strength:', error);\n  }\n}\n", "import { DatabaseService } from '../utils/db';\nimport {\n  fetchAllPlayers,\n  filterPlayersForDevelopment,\n  validatePlayer,\n  transformSleeperPlayer,\n  fetchTrendingPlayers,\n  fetchAllPlayersComplete\n} from '../services/sleeper';\nimport { upsertTrendingPlayers, getTrendingPlayers, getTrendingPlayersByLookback } from '../utils/db';\nimport { \n  fetchFantasyProsProjections, \n  fetchFantasyProsECR, \n  fetchFantasyProsAuctionValues, \n  fetchFantasyProsSOS, \n  fetchFantasyProsPlayers, \n  fetchFantasyProsNews, \n  fetchFantasyProsInjuries, \n  fetchFantasyProsRankings, \n  fetchFantasyProsConsensusRankings, \n  fetchFantasyProsExperts, \n  fetchFantasyProsPlayerPoints,\n  matchFantasyProsToPlayers,\n  matchFantasyProsToPlayerUpdates\n} from '../services/fantasyPros';\nimport { scrapeNFLSchedule } from '../services/nflSchedule';\nimport { generatePlayerMatchupsForWeek, enrichWeatherForGame, syncDefenseStrength } from '../utils/matchups';\nimport { upsertFantasyProsData, getPlayersWithFantasyData, updatePlayerFantasyProsData, upsertNFLSchedule, getNFLSchedule, getNFLGamesByWeek, getNFLGamesByTeam } from '../utils/db';\n\ninterface Env {\n  DB: any;\n  NOAA_BASE_URL: string;\n  ESPN_BASE_URL: string;\n  FANTASYPROS_API_KEY: string;\n}\n\nexport class PlayersHandler {\n  private db: DatabaseService;\n  private env: Env;\n\n  constructor(db: DatabaseService, env: Env) {\n    this.db = db;\n    this.env = env;\n  }\n\n  async handleGet(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const position = url.searchParams.get('position');\n      const limitParam = url.searchParams.get('limit');\n      const limit = limitParam ? parseInt(limitParam) : -1; // -1 means no limit\n      const search = url.searchParams.get('search');\n\n      // Get players from database\n      let players: any[] = await this.db.getAllPlayers();\n\n      // Add projection_source field to indicate no projections available\n      players = players.map(player => ({\n        ...player,\n        projected_points_week: null,\n        projected_points_season: null,\n        projection_source: 'none'\n      }));\n\n      // Apply filters\n      if (position) {\n        players = players.filter((p: any) => p.position.toUpperCase() === position.toUpperCase());\n      }\n\n      if (search) {\n        const searchLower = search.toLowerCase();\n        players = players.filter((p: any) => \n          p.name.toLowerCase().includes(searchLower) ||\n          p.team.toLowerCase().includes(searchLower)\n        );\n      }\n\n      // Apply limit (only if limit is specified and > 0)\n      if (limit > 0) {\n        players = players.slice(0, limit);\n      }\n\n      return new Response(\n        JSON.stringify({\n          success: true,\n          data: {\n            players: players,\n            count: players.length\n          }\n        }),\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('Players GET error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Internal server error' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n\n  async handleSyncSleeper(request: Request): Promise<Response> {\n    try {\n      console.log('Starting Sleeper players sync...');\n\n      // Fetch all players from Sleeper API\n      const players = await fetchAllPlayersComplete();\n      \n      // Transform Sleeper data to our database format\n      const playersToInsert: any[] = [];\n      let skippedCount = 0;\n      \n      for (const player of players) {\n        // Validate required fields\n        const validation = validatePlayer(player);\n        if (!validation.isValid) {\n          console.warn(`Skipping player ${player.player_id}: missing fields: ${validation.missingFields.join(', ')}`);\n          skippedCount++;\n          continue;\n        }\n\n        // Transform Sleeper data to our format using the new function\n        const transformedPlayer = transformSleeperPlayer(player);\n        playersToInsert.push(transformedPlayer);\n      }\n\n      // Store players in database\n      if (playersToInsert.length > 0) {\n        await this.db.upsertSleeperPlayers(playersToInsert);\n      }\n\n      return new Response(\n        JSON.stringify({ \n          success: true, \n          message: `Synced ${playersToInsert.length} players from Sleeper (${skippedCount} skipped due to missing data)`,\n          count: playersToInsert.length,\n          skipped: skippedCount\n        }),\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('Sync Sleeper error:', error);\n      \n      let errorMessage = 'Failed to sync players from Sleeper';\n      if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      return new Response(\n        JSON.stringify({ error: errorMessage }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n\n  async handleTrendingPlayers(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const type = url.searchParams.get('type') as 'add' | 'drop' || 'add';\n      const lookbackHours = parseInt(url.searchParams.get('lookback_hours') || '24');\n\n      console.log(`Fetching trending players (${type}) from Sleeper...`);\n\n      // Fetch trending players from Sleeper API\n      const trendingPlayers = await fetchTrendingPlayers(type, lookbackHours);\n\n      // Get player details for trending players\n      const playerDetails = await this.db.getPlayersBySleeperIds(\n        trendingPlayers.map(p => p.player_id)\n      );\n\n      // Combine trending data with player details\n      const enrichedTrendingPlayers = trendingPlayers.map(trending => {\n        const playerDetail = playerDetails.find(p => p.sleeper_id === trending.player_id);\n        return {\n          ...trending,\n          player: playerDetail || null\n        };\n      });\n\n      return new Response(\n        JSON.stringify({\n          success: true,\n          type,\n          lookback_hours: lookbackHours,\n          players: enrichedTrendingPlayers\n        }),\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('Trending players error:', error);\n      \n      let errorMessage = 'Failed to fetch trending players from Sleeper';\n      if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      return new Response(\n        JSON.stringify({ error: errorMessage }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n\n  async handleSyncESPN(request: Request): Promise<Response> {\n    try {\n      const body = await request.json() as any;\n      const leagueId = body.leagueId;\n\n      if (!leagueId) {\n        return new Response(\n          JSON.stringify({ error: 'leagueId is required' }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      console.log(`Starting ESPN sync for league ${leagueId}...`);\n\n      // This endpoint is deprecated - redirect to Sleeper sync\n      return new Response(\n        JSON.stringify({ \n          error: 'ESPN sync is deprecated. Please use /sync/players to sync from Sleeper API.',\n          message: 'Use POST /sync/players to sync player data from Sleeper'\n        }),\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('Sync ESPN error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Failed to sync ESPN players' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n\n  async handleSyncPlayers(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const pathParts = url.pathname.split('/');\n      const leagueId = pathParts[pathParts.length - 1]; // Get leagueId from URL path\n\n      if (!leagueId) {\n        return new Response(\n          JSON.stringify({ error: 'leagueId is required in URL path' }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      console.log(`Starting ESPN players sync for league ${leagueId}...`);\n\n      // This endpoint is deprecated - redirect to Sleeper sync\n      return new Response(\n        JSON.stringify({ \n          error: 'ESPN sync is deprecated. Please use /sync/players to sync from Sleeper API.',\n          message: 'Use POST /sync/players to sync player data from Sleeper'\n        }),\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('Sync players error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Failed to sync players from ESPN' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n\n  async handleSyncTrendingPlayers(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const type = url.searchParams.get('type') || 'add';\n      const lookbackHours = parseInt(url.searchParams.get('lookback_hours') || '24');\n\n      console.log(`Starting trending players sync for type: ${type}, lookback: ${lookbackHours}h`);\n\n      // Fetch trending players from Sleeper\n      const trendingPlayers = await fetchTrendingPlayers(type, lookbackHours);\n      \n      if (!trendingPlayers || trendingPlayers.length === 0) {\n        return new Response(JSON.stringify({\n          success: false,\n          message: 'No trending players found'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Store trending players in database\n      await upsertTrendingPlayers(this.db.db, trendingPlayers, type, lookbackHours);\n\n      console.log(`Successfully synced ${trendingPlayers.length} trending players`);\n\n      return new Response(JSON.stringify({\n        success: true,\n        message: `Synced ${trendingPlayers.length} trending players`,\n        data: {\n          type,\n          lookback_hours: lookbackHours,\n          count: trendingPlayers.length,\n          players: trendingPlayers\n        }\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n    } catch (error) {\n      console.error('Error syncing trending players:', error);\n      \n      let errorMessage = 'Failed to sync trending players';\n      if (error instanceof Error) {\n        if (error.message.includes('429')) {\n          errorMessage = 'Sleeper API rate limited \u2014 please try again shortly.';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n\n      return new Response(JSON.stringify({\n        success: false,\n        message: errorMessage\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  async handleSyncFantasyPros(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const week = url.searchParams.get('week') ? parseInt(url.searchParams.get('week')!) : undefined;\n      const season = url.searchParams.get('season') ? parseInt(url.searchParams.get('season')!) : 2024;\n      \n      console.log(`Starting FantasyPros sync for week: ${week}, season: ${season}`);\n      \n      // Get all players for matching\n      const allPlayers = await this.db.getAllPlayers();\n      \n      // Fetch minimal FantasyPros data to test API limits\n      const [projections, players] = await Promise.all([\n        fetchFantasyProsProjections(this.env.FANTASYPROS_API_KEY!, week, season),\n        fetchFantasyProsPlayers(this.env.FANTASYPROS_API_KEY!, 'nfl'),\n      ]);\n      \n      // Skip other data types for now to conserve API calls\n      const ecr: any[] = [];\n      const auctionValues: any[] = [];\n      const sos: any[] = [];\n      const news: any[] = [];\n      const injuries: any[] = [];\n      const rankings: any[] = [];\n      const consensusRankings: any[] = [];\n      const experts: any[] = [];\n      const playerPoints: any[] = [];\n      \n      // Combine all FantasyPros data\n      const allFantasyProsData = [\n        ...projections.map(p => ({ ...p, data_type: 'projection' })),\n        ...ecr.map(e => ({ ...e, data_type: 'ecr' })),\n        ...auctionValues.map(a => ({ ...a, data_type: 'auction' })),\n        ...sos.map(s => ({ ...s, data_type: 'sos' })),\n        ...players.map(p => ({ ...p, data_type: 'player' })),\n        ...news.map(n => ({ ...n, data_type: 'news' })),\n        ...injuries.map(i => ({ ...i, data_type: 'injury' })),\n        ...rankings.map(r => ({ ...r, data_type: 'ranking' })),\n        ...consensusRankings.map(cr => ({ ...cr, data_type: 'consensus_ranking' })),\n        ...playerPoints.map(pp => ({ ...pp, data_type: 'player_points' }))\n      ];\n      \n      // Match FantasyPros data to players for direct updates\n      const { matched: playerUpdates, unmatched } = matchFantasyProsToPlayerUpdates(allFantasyProsData, allPlayers);\n      \n      if (playerUpdates.length > 0) {\n        await updatePlayerFantasyProsData(this.db.db, playerUpdates);\n        console.log(`Successfully updated ${playerUpdates.length} players with FantasyPros data (${unmatched.length} unmatched)`);\n        \n        return new Response(JSON.stringify({\n          success: true,\n          message: `Updated ${playerUpdates.length} players with FantasyPros data`,\n          data: {\n            week,\n            season,\n            updated_count: playerUpdates.length,\n            unmatched_count: unmatched.length,\n            unmatched_sample: unmatched.slice(0, 10) // Return sample of unmatched for debugging\n          }\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      } else {\n        return new Response(JSON.stringify({\n          success: true,\n          message: 'No FantasyPros data matched to players',\n          data: { week, season, updated_count: 0, unmatched_count: allFantasyProsData.length }\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n    } catch (error) {\n      console.error('Sync FantasyPros error:', error);\n      return new Response(JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  async handleGetPlayersWithFantasyData(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const week = url.searchParams.get('week') ? parseInt(url.searchParams.get('week')!) : undefined;\n      const season = url.searchParams.get('season') ? parseInt(url.searchParams.get('season')!) : undefined;\n      \n      const players = await getPlayersWithFantasyData(this.db.db, week, season);\n      \n      return new Response(JSON.stringify({\n        success: true,\n        data: {\n          week,\n          season,\n          count: players.length,\n          players\n        }\n      }), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } catch (error) {\n      console.error('Get players with fantasy data error:', error);\n      return new Response(JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  async handleTestFantasyProsKey(request: Request): Promise<Response> {\n    try {\n      const apiKey = this.env.FANTASYPROS_API_KEY;\n      const keyPreview = apiKey ? `${apiKey.substring(0, 8)}...` : 'NOT_FOUND';\n      \n      // Test a single API call to check rate limiting\n      try {\n        const testUrl = 'https://api.fantasypros.com/public/v2/json/nfl/2024/projections?position=QB&week=0';\n        console.log('Testing single FantasyPros API call...');\n        \n        const response = await fetch(testUrl, {\n          headers: {\n            'X-API-Key': apiKey,\n            'Content-Type': 'application/json',\n          },\n        });\n        \n        console.log(`Test API response status: ${response.status} ${response.statusText}`);\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(`Test API error: ${errorText}`);\n          \n          return new Response(JSON.stringify({\n            success: true,\n            message: 'FantasyPros API key status',\n            data: {\n              key_available: !!apiKey,\n              key_preview: keyPreview,\n              key_length: apiKey ? apiKey.length : 0,\n              api_test: {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorText\n              }\n            }\n          }), {\n            headers: { 'Content-Type': 'application/json' }\n          });\n        }\n        \n        const data = await response.json();\n        console.log('Test API call successful, got data:', Object.keys(data));\n        \n        return new Response(JSON.stringify({\n          success: true,\n          message: 'FantasyPros API key status',\n          data: {\n            key_available: !!apiKey,\n            key_preview: keyPreview,\n            key_length: apiKey ? apiKey.length : 0,\n            api_test: {\n              status: response.status,\n              statusText: response.statusText,\n              success: true,\n              data_keys: Object.keys(data)\n            }\n          }\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n        \n      } catch (apiError) {\n        console.error('Test API call failed:', apiError);\n        \n        return new Response(JSON.stringify({\n          success: true,\n          message: 'FantasyPros API key status',\n          data: {\n            key_available: !!apiKey,\n            key_preview: keyPreview,\n            key_length: apiKey ? apiKey.length : 0,\n            api_test: {\n              error: apiError instanceof Error ? apiError.message : 'Unknown API error'\n            }\n          }\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n    } catch (error) {\n      console.error('Test FantasyPros key error:', error);\n      return new Response(JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  async handleSyncNFLSchedule(request: Request): Promise<Response> {\n    try {\n      console.log('Starting NFL schedule sync...');\n      \n      // Scrape NFL schedule\n      const games = await scrapeNFLSchedule();\n      \n      if (games.length > 0) {\n        await upsertNFLSchedule(this.db.db, games);\n        console.log(`Successfully synced ${games.length} NFL schedule games`);\n        \n        return new Response(JSON.stringify({\n          success: true,\n          message: `Synced ${games.length} NFL schedule games`,\n          data: {\n            games_count: games.length,\n            games: games\n          }\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      } else {\n        return new Response(JSON.stringify({\n          success: true,\n          message: 'No NFL schedule games found',\n          data: { games_count: 0 }\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n    } catch (error) {\n      console.error('Sync NFL schedule error:', error);\n      return new Response(JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  async handleGetNFLSchedule(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const week = url.searchParams.get('week') ? parseInt(url.searchParams.get('week')!) : undefined;\n      \n      const games = await getNFLSchedule(this.db.db, week);\n      \n      return new Response(JSON.stringify({\n        success: true,\n        data: {\n          week,\n          count: games.length,\n          games\n        }\n      }), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } catch (error) {\n      console.error('Get NFL schedule error:', error);\n      return new Response(JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  async handleSyncMatchups(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const week = url.searchParams.get('week');\n      const enrichWeather = url.searchParams.get('weather') === 'true';\n      \n      if (!week) {\n        return new Response(JSON.stringify({\n          success: false,\n          error: 'Week parameter is required'\n        }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      const weekNum = parseInt(week);\n      if (isNaN(weekNum) || weekNum < 1 || weekNum > 18) {\n        return new Response(JSON.stringify({\n          success: false,\n          error: 'Week must be between 1 and 18'\n        }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Test database connection first\n      try {\n        console.log('Testing database connection...');\n        const testQuery = await this.db.db.prepare('SELECT COUNT(*) as count FROM nfl_schedule').first();\n        console.log('Database connection test successful:', testQuery);\n        \n        console.log('Testing players query...');\n        const playersQuery = await this.db.db.prepare('SELECT COUNT(*) as count FROM players WHERE team IS NOT NULL AND team != \\'\\'').first();\n        console.log('Players query test successful:', playersQuery);\n        \n        console.log('Testing schedule query without parameter...');\n        const scheduleQueryNoParam = await this.db.db.prepare('SELECT COUNT(*) as count FROM nfl_schedule').first();\n        console.log('Schedule query without parameter test successful:', scheduleQueryNoParam);\n        \n        console.log('Testing schedule query with hardcoded parameter...');\n        const scheduleQueryHardcoded = await this.db.db.prepare('SELECT COUNT(*) as count FROM nfl_schedule WHERE week = 1').first();\n        console.log('Schedule query with hardcoded parameter test successful:', scheduleQueryHardcoded);\n        \n        console.log('All database tests passed!');\n        \n\n        \n      } catch (error) {\n        console.error('Database connection test failed:', error);\n        return new Response(JSON.stringify({\n          success: false,\n          error: 'Database connection failed: ' + (error instanceof Error ? error.message : 'Unknown error')\n        }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Sync defense strength first (skip for now to debug)\n      // await syncDefenseStrength(this.db.db);\n\n      // Generate matchups for the week\n      console.log('Calling generatePlayerMatchupsForWeek...');\n      await generatePlayerMatchupsForWeek(this.db.db, weekNum);\n      console.log('generatePlayerMatchupsForWeek completed');\n\n      // Enrich with weather data if requested\n      if (enrichWeather) {\n        const games = await this.db.db.prepare(`\n          SELECT * FROM nfl_schedule WHERE week = ?\n        `).all(weekNum);\n\n        for (const game of games) {\n          await enrichWeatherForGame(this.db.db, game);\n        }\n      }\n\n      // Get matchup count\n      const matchupCount = await this.db.db.prepare(`\n        SELECT COUNT(*) as count FROM player_matchups WHERE week = ?\n      `).first(weekNum);\n\n      return new Response(JSON.stringify({\n        success: true,\n        message: `Synced matchups for week ${weekNum}`,\n        data: {\n          week: weekNum,\n          matchups_count: matchupCount.count,\n          weather_enriched: enrichWeather\n        }\n      }), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } catch (error) {\n      console.error('Sync matchups error:', error);\n      return new Response(JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  async handleTestDatabase(request: Request): Promise<Response> {\n    try {\n      console.log('Testing database connection...');\n      const testQuery = await this.db.db.prepare('SELECT 1 as test').first();\n      console.log('Database connection test successful:', testQuery);\n      \n      console.log('Testing nfl_schedule table...');\n      const scheduleQuery = await this.db.db.prepare('SELECT COUNT(*) as count FROM nfl_schedule').first();\n      console.log('Schedule query test successful:', scheduleQuery);\n      \n      console.log('Testing players table...');\n      const playersQuery = await this.db.db.prepare('SELECT COUNT(*) as count FROM players').first();\n      console.log('Players query test successful:', playersQuery);\n      \n      console.log('Testing parameter binding...');\n      const paramQuery = await this.db.db.prepare('SELECT COUNT(*) as count FROM nfl_schedule WHERE week = ?').bind(1).first();\n      console.log('Parameter query test successful:', paramQuery);\n      \n      console.log('Testing insert...');\n      const insertStmt = this.db.db.prepare('INSERT OR REPLACE INTO player_matchups (player_id, week, game_id, opponent_team, is_home) VALUES (?, ?, ?, ?, ?)');\n      await insertStmt.bind(999999, 1, 'test-game', 'TEST', 1).run();\n      console.log('Insert test successful');\n      \n      console.log('Testing exact utility function queries...');\n      const week = 1;\n      \n      // Test the exact same queries as the utility function\n      const stmt = this.db.db.prepare(`\n        SELECT * FROM nfl_schedule WHERE week = ?\n      `);\n      const result = await stmt.bind(week).all();\n      const schedule = result.results || result;\n      console.log(`Found ${schedule.length} games for week ${week}`);\n      \n      const playersStmt = this.db.db.prepare(`\n        SELECT * FROM players WHERE team IS NOT NULL AND team != ''\n      `);\n      const playersResult = await playersStmt.all();\n      const players = playersResult.results || playersResult;\n      console.log(`Found ${players.length} players with team information`);\n      \n      return new Response(JSON.stringify({\n        success: true,\n        message: 'Database tests passed',\n        data: {\n          test: testQuery,\n          schedule_count: scheduleQuery,\n          players_count: playersQuery,\n          param_query: paramQuery,\n          utility_schedule_count: schedule.length,\n          utility_players_count: players.length\n        }\n      }), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } catch (error) {\n      console.error('Database test failed:', error);\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Database test failed: ' + (error instanceof Error ? error.message : 'Unknown error')\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  async handleGetMatchups(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const week = url.searchParams.get('week');\n      const playerId = url.searchParams.get('player_id');\n      const team = url.searchParams.get('team');\n\n      let query = `\n        SELECT pm.*, p.name, p.team, p.position\n        FROM player_matchups pm\n        JOIN players p ON pm.player_id = p.sleeper_id\n        WHERE 1=1\n      `;\n      const params: any[] = [];\n\n      if (week) {\n        query += ' AND pm.week = ?';\n        params.push(parseInt(week));\n      }\n\n      if (playerId) {\n        query += ' AND pm.player_id = ?';\n        params.push(parseInt(playerId));\n      }\n\n      if (team) {\n        query += ' AND p.team = ?';\n        params.push(team);\n      }\n\n      query += ' ORDER BY pm.week, p.name';\n\n      const matchups = await this.db.db.prepare(query).all(...params);\n\n      return new Response(JSON.stringify({\n        success: true,\n        data: {\n          matchups: matchups,\n          count: matchups.length\n        }\n      }), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } catch (error) {\n      console.error('Get matchups error:', error);\n      return new Response(JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n} \n\nexport async function handleGetTrendingPlayers(request: Request, db: any): Promise<Response> {\n  try {\n    const url = new URL(request.url);\n    const type = url.searchParams.get('type') || 'add';\n    const lookbackHours = url.searchParams.get('lookback_hours');\n    const limit = parseInt(url.searchParams.get('limit') || '10');\n\n    let trendingPlayers;\n    if (lookbackHours) {\n      trendingPlayers = await getTrendingPlayersByLookback(db, type, parseInt(lookbackHours), limit);\n    } else {\n      trendingPlayers = await getTrendingPlayers(db, type, limit);\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      data: {\n        type,\n        lookback_hours: lookbackHours,\n        count: trendingPlayers.length,\n        players: trendingPlayers\n      }\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Error fetching trending players:', error);\n    \n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to fetch trending players'\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n} ", "import { DatabaseService } from '../utils/db';\n\nexport class AlertsHandler {\n  private db: DatabaseService;\n\n  constructor(db: DatabaseService) {\n    this.db = db;\n  }\n\n  async handleGet(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const userId = url.searchParams.get('userId');\n      const leagueId = url.searchParams.get('leagueId');\n      const status = url.searchParams.get('status');\n      const limit = url.searchParams.get('limit');\n\n      if (!userId) {\n        return new Response(\n          JSON.stringify({ error: 'userId query parameter is required' }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      const alertsResult = await this.db.getAlerts(userId, leagueId || undefined);\n      let alerts = alertsResult.results || [];\n\n      // Apply status filter if provided\n      if (status) {\n        alerts = alerts.filter((a: any) => a.status === status);\n      }\n\n      // Apply limit\n      const limitNum = limit ? parseInt(limit, 10) : 50;\n      if (limitNum > 0) {\n        alerts = alerts.slice(0, limitNum);\n      }\n\n      return new Response(\n        JSON.stringify({\n          alerts: alerts,\n          count: alerts.length\n        }),\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('Alerts GET error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Internal server error' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n\n  async handlePost(request: Request): Promise<Response> {\n    try {\n      const body = await request.json() as any;\n      const { userId, leagueId, type, message } = body;\n\n      if (!userId || !leagueId || !type || !message) {\n        return new Response(\n          JSON.stringify({ error: 'userId, leagueId, type, and message are required' }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      // Validate alert type\n      const validTypes = ['injury', 'trade', 'waiver', 'news', 'weather', 'system'];\n      if (!validTypes.includes(type)) {\n        return new Response(\n          JSON.stringify({ error: 'Invalid alert type. Must be one of: ' + validTypes.join(', ') }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      const result = await this.db.createAlert(userId, leagueId, type, message);\n\n      return new Response(\n        JSON.stringify({\n          success: true,\n          message: 'Alert created successfully',\n          id: result.meta?.last_row_id\n        }),\n        { status: 201, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('Alerts POST error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Internal server error' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n\n  async handlePatch(request: Request): Promise<Response> {\n    try {\n      const body = await request.json() as any;\n      const { alertId } = body;\n\n      if (!alertId) {\n        return new Response(\n          JSON.stringify({ error: 'alertId is required' }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      const alertIdNum = parseInt(alertId, 10);\n      if (isNaN(alertIdNum)) {\n        return new Response(\n          JSON.stringify({ error: 'alertId must be a valid number' }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      const result = await this.db.markAlertAsRead(alertIdNum);\n\n      if (result.meta?.changes === 0) {\n        return new Response(\n          JSON.stringify({ error: 'Alert not found or already marked as read' }),\n          { status: 404, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      return new Response(\n        JSON.stringify({\n          success: true,\n          message: 'Alert marked as read successfully'\n        }),\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('Alerts PATCH error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Internal server error' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n} ", "import { DatabaseService } from '../utils/db';\nimport { fetchTeamRoster } from '../services/espn';\n\nexport interface TeamPlayer {\n  espn_id: string;\n  name: string;\n  position: string;\n  team: string;\n  status: string;\n  bye_week: number | null;\n  projected_points_week: number | null;\n  projected_points_season: number | null;\n  projection_source: string;\n}\n\nexport class TeamHandler {\n  private db: DatabaseService;\n\n  constructor(db: DatabaseService) {\n    this.db = db;\n  }\n\n  async handleGet(request: Request): Promise<Response> {\n    try {\n      const url = new URL(request.url);\n      const pathParts = url.pathname.split('/');\n      \n      // Extract leagueId and teamId from path: /team/:leagueId/:teamId\n      const leagueIdIndex = pathParts.indexOf('team') + 1;\n      const leagueId = pathParts[leagueIdIndex];\n      const teamId = pathParts[leagueIdIndex + 1];\n\n      if (!leagueId || !teamId) {\n        return new Response(\n          JSON.stringify({ error: 'leagueId and teamId are required in URL path' }),\n          { status: 400, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      console.log(`Fetching team roster for league ${leagueId}, team ${teamId}...`);\n\n      // Fetch team roster from ESPN\n      const rosterData = await fetchTeamRoster(leagueId, parseInt(teamId));\n      \n      if (!rosterData || !rosterData.teams || !rosterData.teams[0]) {\n        return new Response(\n          JSON.stringify({ error: 'No team data found' }),\n          { status: 404, headers: { 'Content-Type': 'application/json' } }\n        );\n      }\n\n      const team = rosterData.teams[0];\n      const teamPlayers: TeamPlayer[] = [];\n\n      // Process each player in the roster\n      if (team.roster && team.roster.entries) {\n        for (const entry of team.roster.entries) {\n          if (!entry.playerPoolEntry || !entry.playerPoolEntry.player) {\n            continue;\n          }\n\n          const player = entry.playerPoolEntry.player;\n          const espnId = player.id.toString();\n\n          // Get player from database to get additional info\n          const dbPlayer = await this.db.getPlayerByEspnId(espnId);\n          \n          // Get projection if available\n          const projection = dbPlayer ? await this.db.getProjectionByPlayerId(dbPlayer.id) : null;\n\n          teamPlayers.push({\n            espn_id: espnId,\n            name: player.fullName || `${player.firstName} ${player.lastName}`,\n            position: dbPlayer?.position || 'UNK',\n            team: dbPlayer?.team || 'FA',\n            status: player.injuryStatus || 'healthy',\n            bye_week: dbPlayer?.bye_week || null,\n            projected_points_week: projection?.projected_points || null,\n            projected_points_season: null, // ESPN doesn't provide season projections\n            projection_source: projection?.source || 'none'\n          });\n        }\n      }\n\n      return new Response(\n        JSON.stringify({\n          success: true,\n          team: {\n            id: team.id,\n            name: team.name,\n            abbreviation: team.abbreviation\n          },\n          players: teamPlayers,\n          count: teamPlayers.length\n        }),\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\n      );\n\n    } catch (error) {\n      console.error('Team GET error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Failed to fetch team roster' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n  }\n} ", "import { DatabaseService } from './utils/db';\nimport { NOAAService } from './services/noaa';\nimport { LeagueHandler } from './handlers/league';\nimport { PlayersHandler } from './handlers/players';\nimport { AlertsHandler } from './handlers/alerts';\nimport { TeamHandler } from './handlers/team';\nimport { \n  fetchAllPlayers, \n  filterPlayersForDevelopment, \n  validatePlayer, \n  transformSleeperPlayer, \n  fetchTrendingPlayers,\n  fetchAllPlayersComplete\n} from './services/sleeper';\nimport { \n  upsertTrendingPlayers \n} from './utils/db';\n\n// Cloudflare Workers types\ninterface ExecutionContext {\n  waitUntil(promise: Promise<any>): void;\n  passThroughOnException(): void;\n}\n\ninterface ScheduledEvent {\n  cron: string;\n  scheduledTime: number;\n  type: string;\n}\n\nexport interface Env {\n  DB: any; // D1Database type\n  NOAA_BASE_URL: string;\n  ESPN_BASE_URL: string;\n}\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    // Initialize services\n    const db = new DatabaseService(env.DB);\n    const noaaService = new NOAAService(env.NOAA_BASE_URL);\n\n    // Initialize handlers\n    const leagueHandler = new LeagueHandler(db);\n    const playersHandler = new PlayersHandler(db, env);\n    const alertsHandler = new AlertsHandler(db);\n    const teamHandler = new TeamHandler(db);\n\n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    };\n\n    // Handle preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { status: 200, headers: corsHeaders });\n    }\n\n    try {\n      let response: Response;\n\n      switch (path) {\n        case '/league':\n          if (request.method === 'POST') {\n            response = await leagueHandler.handlePost(request);\n          } else if (request.method === 'GET') {\n            response = await leagueHandler.handleGet(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/players':\n          if (request.method === 'GET') {\n            response = await playersHandler.handleGet(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/sync/players':\n          if (request.method === 'POST') {\n            response = await playersHandler.handleSyncSleeper(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/trending/players':\n          if (request.method === 'GET') {\n            response = await playersHandler.handleTrendingPlayers(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/sync/trending':\n          if (request.method === 'POST') {\n            response = await playersHandler.handleSyncTrendingPlayers(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/sync/fantasy-pros':\n          if (request.method === 'POST') {\n            response = await playersHandler.handleSyncFantasyPros(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/players/with-fantasy-data':\n          if (request.method === 'GET') {\n            response = await playersHandler.handleGetPlayersWithFantasyData(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/test/fantasy-pros-key':\n          if (request.method === 'GET') {\n            response = await playersHandler.handleTestFantasyProsKey(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/nfl/schedule':\n          if (request.method === 'GET') {\n            response = await playersHandler.handleGetNFLSchedule(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/sync/nfl-schedule':\n          if (request.method === 'POST') {\n            response = await playersHandler.handleSyncNFLSchedule(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/matchups':\n          if (request.method === 'GET') {\n            response = await playersHandler.handleGetMatchups(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/sync/matchups':\n          if (request.method === 'POST') {\n            response = await playersHandler.handleSyncMatchups(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/test/database':\n          if (request.method === 'GET') {\n            response = await playersHandler.handleTestDatabase(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/sync/espn':\n          if (request.method === 'POST') {\n            response = await playersHandler.handleSyncESPN(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/alerts':\n          if (request.method === 'GET') {\n            response = await alertsHandler.handleGet(request);\n          } else if (request.method === 'POST') {\n            response = await alertsHandler.handlePost(request);\n          } else if (request.method === 'PATCH') {\n            response = await alertsHandler.handlePatch(request);\n          } else {\n            response = new Response('Method not allowed', { status: 405 });\n          }\n          break;\n\n        case '/health':\n          response = new Response(\n            JSON.stringify({ status: 'healthy', timestamp: new Date().toISOString() }),\n            { status: 200, headers: { 'Content-Type': 'application/json' } }\n          );\n          break;\n\n        default:\n          // Handle path-based endpoints\n          if (path.startsWith('/team/') && request.method === 'GET') {\n            response = await teamHandler.handleGet(request);\n          } else if (path.startsWith('/sync/players/') && request.method === 'POST') {\n            response = await playersHandler.handleSyncPlayers(request);\n          } else if (path.startsWith('/league/') && path.endsWith('/settings') && request.method === 'GET') {\n            response = await leagueHandler.handleGetLeagueSettings(request);\n          } else {\n            response = new Response('Not found', { status: 404 });\n          }\n          break;\n      }\n\n      // Add CORS headers to all responses\n      const responseHeaders = new Headers(response.headers);\n      Object.entries(corsHeaders).forEach(([key, value]) => {\n        responseHeaders.set(key, value);\n      });\n\n      return new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: responseHeaders,\n      });\n\n    } catch (error) {\n      console.error('Request error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Internal server error' }),\n        { \n          status: 500, \n          headers: { \n            'Content-Type': 'application/json',\n            ...corsHeaders\n          } \n        }\n      );\n    }\n  },\n\n  async scheduled(event: ScheduledEvent, env: Env, ctx: ExecutionContext): Promise<void> {\n    console.log(`Running scheduled job with cron: ${event.cron}`);\n    \n    // Check which cron job this is\n    if (event.cron === \"0 6 * * *\") {\n      // Daily Sleeper API sync job\n      console.log('Running daily Sleeper API sync job...');\n      \n      try {\n        // Initialize services\n        const db = new DatabaseService(env.DB);\n\n        // 1. Sync all players from Sleeper API\n        console.log('Syncing all players from Sleeper API...');\n        const players = await fetchAllPlayersComplete();\n        \n        const validPlayers = [];\n        let skippedCount = 0;\n        \n        for (const player of players) {\n          const validation = validatePlayer(player);\n          if (validation.isValid) {\n            const transformedPlayer = transformSleeperPlayer(player);\n            validPlayers.push(transformedPlayer);\n          } else {\n            skippedCount++;\n          }\n        }\n        \n        if (validPlayers.length > 0) {\n          await db.upsertSleeperPlayers(validPlayers);\n        }\n        console.log(`Successfully synced ${validPlayers.length} players from Sleeper API (${skippedCount} skipped)`);\n\n        // 2. Sync trending players (both add and drop)\n        console.log('Syncing trending players from Sleeper API...');\n        const trendingTypes = ['add', 'drop'];\n        const lookbackHours = 24;\n        \n        for (const type of trendingTypes) {\n          try {\n            console.log(`Fetching trending ${type} players with ${lookbackHours}h lookback...`);\n            const trendingPlayers = await fetchTrendingPlayers(type, lookbackHours);\n            \n            if (trendingPlayers && trendingPlayers.length > 0) {\n              await upsertTrendingPlayers(env.DB, trendingPlayers, type, lookbackHours);\n              console.log(`Successfully synced ${trendingPlayers.length} trending ${type} players`);\n            } else {\n              console.log(`No trending ${type} players found for ${lookbackHours}h lookback`);\n            }\n          } catch (error) {\n            console.error(`Error syncing trending ${type} players:`, error);\n            // Continue with other types even if one fails\n          }\n        }\n\n\n\n        console.log('Daily Sleeper API sync job completed successfully');\n      } catch (error) {\n        console.error('Scheduled job error:', error);\n      }\n    } else if (event.cron === \"0 * * * *\") {\n      // Hourly FantasyPros API sync job\n      console.log('Running hourly FantasyPros API sync job...');\n      \n      try {\n        // Initialize services\n        const db = new DatabaseService(env.DB);\n        const playersHandler = new PlayersHandler(db, env);\n        \n        // Create a mock request for the FantasyPros sync\n        const mockRequest = new Request('https://fantasy-command-center-api.kevin-mcgovern.workers.dev/sync/fantasy-pros', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' }\n        });\n        \n        const response = await playersHandler.handleSyncFantasyPros(mockRequest);\n        const result = await response.json();\n        \n        if (result.success) {\n          console.log('Hourly FantasyPros API sync job completed successfully:', result.message);\n        } else {\n          console.error('FantasyPros sync failed:', result.error);\n        }\n      } catch (error) {\n        console.error('FantasyPros scheduled job error:', error);\n      }\n    } else {\n      console.log(`Unknown cron pattern: ${event.cron}`);\n    }\n  },\n\n  getCurrentWeek(date: Date): number {\n    // Simple week calculation - you might want to make this more sophisticated\n    const seasonStart = new Date(2024, 8, 5); // September 5, 2024\n    const diffTime = date.getTime() - seasonStart.getTime();\n    const diffWeeks = Math.ceil(diffTime / (1000 * 60 * 60 * 24 * 7));\n    return Math.max(1, Math.min(18, diffWeeks));\n  }\n}; ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/kevinmcgovern/fantasy-command-center/fantasy-command-center/apps/api/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/kevinmcgovern/fantasy-command-center/fantasy-command-center/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/kevinmcgovern/fantasy-command-center/fantasy-command-center/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/kevinmcgovern/fantasy-command-center/fantasy-command-center/apps/api/src/index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/kevinmcgovern/fantasy-command-center/fantasy-command-center/apps/api/.wrangler/tmp/bundle-41kHW4/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/kevinmcgovern/fantasy-command-center/fantasy-command-center/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/kevinmcgovern/fantasy-command-center/fantasy-command-center/apps/api/.wrangler/tmp/bundle-41kHW4/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/kevinmcgovern/fantasy-command-center/fantasy-command-center/apps/api/.wrangler/tmp/bundle-41kHW4/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
